// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:jsgen`.
// ignore_for_file: type=lint
import '' as self;
import 'dart:typed_data';
import 'dart:js_interop';
import 'dart:js_interop_unsafe';

///
/// Sub-classes of [NativeType] represent a "native" type (by which we mean a
/// type that can be passed to a WASM-compiled native function), and its
/// equivalent Dart representation.
///
/// Most sub-classes are non-constructible; they are only intended to preserve
/// compile-time type information and to translate between native types and
/// their Dart equivalent.
///
/// The exceptions are [Pointer], [Array] and sub-classes of [Struct]; these can be
/// instantiated and returned to the user.
///
/// Sub-classes doesn't necessarily represent a singular WASM type; for example,
/// WASM does not have a char type but we implement a [Char] type to help
/// preserve "native" type information. Without this, [const char*] would only be
/// represented as Pointer<Int64>, and we would have no way of knowing that
/// it can safely be interpreted/converted to a Dart String.
///
///
abstract final class NativeType {}

extension type const Pointer<T extends NativeType>(int addr) implements int {
  Pointer<T> operator +(int byteOffset) => Pointer<T>(this.addr + byteOffset);
  Pointer<U> cast<U extends NativeType>() => this as Pointer<U>;
  void free() {
    _lib._free(this);
  }

  int get address => addr;
}

base class PointerClass<T extends NativeType> extends NativeType {
  final Pointer<T> addr;

  PointerClass(this.addr);

  String get llvmType => '*';
  int size() => 4;

  static PointerClass<PointerClass<T>> stackAlloc<T extends NativeType>(
    int count,
  ) {
    return _lib._stackAlloc<T>(4 * count) as PointerClass<PointerClass<T>>;
  }

  PointerClass<T> operator +(int numElements) =>
      PointerClass<T>(this.addr.addr + (numElements * size()) as Pointer<T>);
  PointerClass<U> cast<U extends NativeType>() => this as PointerClass<U>;
}

extension type Null._(NativeType value) implements NativeType {}

Pointer<NativeFunction<T>> addFunction<T>(JSFunction fn, String signature) {
  return _lib.addFunction(fn, signature);
}

extension type Char._(NativeType value) implements NativeType {
  static Pointer<Char> stackAlloc(int count) {
    return Pointer<Char>(_lib._stackAlloc<Char>(4 * count));
  }
}

extension type const Uint32._(NativeType nt) implements NativeType {
  static Pointer<Uint32> stackAlloc(int count) {
    return _lib._stackAlloc<Uint32>(4 * count);
  }
}

extension type const Uint8._(NativeType nt) implements NativeType {
  static Pointer<Uint8> stackAlloc(int count) {
    return _lib._stackAlloc<Uint8>(count);
  }
}

extension type const Int8._(NativeType nt) implements NativeType {
  static Pointer<Int8> stackAlloc(int count) {
    return _lib._stackAlloc<Int8>(count);
  }
}

extension type const Uint16._(NativeType nt) implements NativeType {
  static Pointer<Uint16> stackAlloc(int count) {
    return _lib._stackAlloc<Uint16>(2 * count);
  }
}

extension type const Int16._(NativeType nt) implements NativeType {
  static Pointer<Int16> stackAlloc(int count) {
    return _lib._stackAlloc<Int16>(2 * count);
  }
}

extension type const Int32._(NativeType nt) implements NativeType {
  static Pointer<Int32> stackAlloc(int count) {
    return _lib._stackAlloc<Int32>(4 * count);
  }
}

extension type Int64(NativeType nt) implements NativeType {
  static Pointer<Int64> stackAlloc(int count) {
    return _lib._stackAlloc<Int64>(8 * count);
  }
}
extension type Float32._(NativeType nt) implements NativeType {
  static Pointer<Float32> stackAlloc(int count) {
    return _lib._stackAlloc<Float32>(4 * count);
  }
}
extension type Float64._(NativeType nt) implements NativeType {
  static Pointer<Float64> stackAlloc(int count) {
    return _lib._stackAlloc<Float64>(8 * count);
  }
}
extension type NativeFunction<T>._(NativeType nt) implements NativeType {}
extension type Void._(NativeType nt) implements NativeType {}

Pointer<Never> nullptr = Pointer<Never>(0);

extension PointerPointerClass<T extends NativeType>
    on Pointer<PointerClass<T>> {
  operator [](int i) => this + i;
  void operator []=(int i, Pointer<T> value) {
    _lib.setValue(this + (i * 4), value.addr.toJS, 'i64');
  }
}

extension fncp<T extends NativeType> on void Function(Pointer<T>) {
  Pointer<NativeFunction<void Function(Pointer<T>)>> addFunction() {
    var fnPtr = _lib.addFunction<void Function(Pointer<T>)>(this.toJS, "vp");
    return fnPtr;
  }
}

extension VoidPointerClass on Pointer<Void> {
  String get llvmType => 'v';

  static Pointer<Void> fromAddress(int addr) => Pointer<Void>(addr);
}

extension Int32PointerClass on Pointer<Int32> {
  String get llvmType => 'i32';

  void setValue(int value) {
    _lib.setValue(this, value.toJS, llvmType);
  }

  int getValue() {
    return _lib.getValue(this, llvmType).toDartInt;
  }

  static Pointer<Int32> fromAddress(int addr) => Pointer<Int32>(addr);
}

extension Int64Pointer on Pointer<Int64> {
  String get llvmType => 'i64';

  void setValue(int value) {
    _lib.setValue(this, value.toJS, llvmType);
  }

  int getValue() {
    return _lib.getValue(this, llvmType).toDartInt;
  }

  static Pointer<Int64> fromAddress(int addr) => Pointer<Int64>(addr);
}

extension Float32Pointer on Pointer<Float32> {
  String get llvmType => 'float';

  void setValue(double value) {
    _lib.setValue(this, value.toJS, llvmType);
  }

  double getValue() {
    return _lib.getValue(this, llvmType).toDartDouble;
  }

  double operator [](int i) {
    return _lib.getValue(this + (i * 4), 'f').toDartDouble;
  }

  operator []=(int i, double val) {
    _lib.setValue(this + (i * 4), val.toJS, 'f');
  }

  static Pointer<Float32> fromAddress(int addr) => Pointer<Float32>(addr);
}

extension Float64Pointer on Pointer<Float64> {
  String get llvmType => 'double';

  void setValue(double value) {
    _lib.setValue(this, value.toJS, llvmType);
  }

  double getValue() {
    return _lib.getValue(this, llvmType).toDartDouble;
  }

  static Pointer<Float64> fromAddress(int addr) => Pointer<Float64>(addr);
}

extension StringUtils on String {
  Pointer<Char> toNativeUtf8() {
    var len = _lib._lengthBytesUTF8(this) + 1;
    var ptr = Char.stackAlloc(len);
    _lib._stringToUTF8(this, ptr, len);
    return ptr;
  }
}

extension CharPtr on Pointer<Char> {
  void setValue(String value) {
    var len = _lib._lengthBytesUTF8(value);
    _lib._stringToUTF8(value, this, len);
  }

  String toDartString() {
    return _lib._UTF8ToString(this);
  }

  static Pointer<Char> fromAddress(int addr) => Pointer<Char>(addr);
}

extension DisposePointerClass<T extends NativeType> on Pointer<NativeFunction> {
  void dispose() {
    _lib.removeFunction(this);
  }
}

sealed class Struct extends NativeType {
  final Pointer _address;

  Struct(this._address);

  static T create<T extends Struct>() {
    switch (T) {
      case double4x4:
        final ptr = double4x4.stackAlloc();
        return ptr.toDart() as T;
      case TFogOptions:
        final ptr = TFogOptions.stackAlloc();
        final fogOptions = ptr.toDart();
        return fogOptions as T;
    }
    throw Exception();
  }
}

extension StructPointer<T extends Struct> on T {
  Pointer<T> get address => _address as Pointer<T>;
}

extension type const Array<T extends NativeType>._(
    ({int numElements, Pointer<T> addr}) _) {
  Array<U> cast<U extends NativeType>() => this as Array<U>;

  Uint8List asUint8List() {
    final start = _.addr;
    final end = _.addr.addr + _.numElements;

    return Uint8List.sublistView(
      _lib.HEAPU8.toDart,
      start.addr,
      end,
    );
  }

  void setValue(Uint8List data) {
    _lib.writeArrayToMemory(data.toJS, _.addr);
  }
}

extension ArrayInt32Ext on Array<Int32> {
  double operator [](int i) {
    return _lib.getValue(_.addr + (i * 4), 'double').toDartDouble;
  }
}

extension ArrayFloat32Ext on Array<Float32> {
  double operator [](int i) {
    return _lib.getValue(_.addr + (i * 4), 'double').toDartDouble;
  }
}

extension ArrayFloat64Ext on Array<Float64> {
  double operator [](int i) {
    return _lib.getValue(_.addr + (i * 8), 'double').toDartDouble;
  }

  void operator []=(int i, double v) {
    _lib.setValue(_.addr + (i * 8), v.toJS, 'double');
  }
}

late NativeLibrary _lib;

Pointer<T> malloc<T extends NativeType>(int numBytes) {
  return _lib._malloc<T>(numBytes);
}

Pointer<T> stackAlloc<T extends NativeType>(int numBytes) {
  final ptr = _lib._stackAlloc<T>(numBytes);
  return ptr;
}

void free(Pointer ptr) {
  _lib._free(ptr);
}

@JS('BigInt')
external JSBigInt bigInt(String s);

@JS('BigInt.asUintN')
external JSBigInt bigIntasUintN(int numBits, JSBigInt bi);

extension JSBigIntExtension on JSBigInt {
  BigInt get toDart {
    return BigInt.parse(this.toString());
  }
}

extension BigIntExtension on int {
  JSBigInt get toJSBigInt {
    return bigInt(this.toString());
  }
}

extension DartBigIntExtension on BigInt {
  JSBigInt get toJSBigInt {
    return bigInt(this.toString());
  }
}

extension type NativeLibrary(JSObject _) implements JSObject {
  static NativeLibrary get instance => _lib;

  static void initBindings(String moduleName) {
    var lib = globalContext.getProperty(moduleName.toJS);
    if (lib == null) {
      throw Exception("Failed to find JS module ${moduleName}");
    }
    _lib = lib as NativeLibrary;
  }

  @JS('stackAlloc')
  external Pointer<T> _stackAlloc<T extends NativeType>(int numBytes);

  external Pointer<T> _malloc<T extends NativeType>(int numBytes);

  external void _free(Pointer ptr);

  @JS('stackSave')
  external Pointer<Void> stackSave();

  @JS('stackRestore')
  external void stackRestore(Pointer<Void> ptr);

  @JS('getValue')
  external JSBigInt getValueBigInt(Pointer addr, String llvmType);
  external JSNumber getValue(Pointer addr, String llvmType);
  external void setValue(Pointer addr, JSNumber value, String llvmType);

  @JS("lengthBytesUTF8")
  external int _lengthBytesUTF8(String str);

  @JS("UTF8ToString")
  external String _UTF8ToString(Pointer<Char> ptr);

  @JS("stringToUTF8")
  external void _stringToUTF8(
      String str, Pointer<Char> ptr, int maxBytesToWrite);

  external void writeArrayToMemory(JSUint8Array data, Pointer ptr);

  external Pointer<NativeFunction<T>> addFunction<T>(
      JSFunction f, String signature);
  external void removeFunction<T>(Pointer<NativeFunction<T>> f);
  external JSUint8Array get HEAPU8;
  external JSFloat32Array get HEAPF32;

  external void _Thermion_resizeCanvas(
    int width,
    int height,
  );
  external int _Thermion_createGLContext();
  external int _Thermion_getGLContext();
  external Pointer<Int32> _TSWAP_CHAIN_CONFIG_TRANSPARENT;
  external Pointer<Int32> _TSWAP_CHAIN_CONFIG_READABLE;
  external Pointer<Int32> _TSWAP_CHAIN_CONFIG_APPLE_CVPIXELBUFFER;
  external Pointer<Int32> _TSWAP_CHAIN_CONFIG_HAS_STENCIL_BUFFER;
  external Pointer<TMaterialInstance> _Material_createInstance(
    Pointer<TMaterial> tMaterial,
  );
  external Pointer<TMaterial> _Material_createImageMaterial(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TMaterial> _Material_createGridMaterial(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TMaterial> _Material_createGizmoMaterial(
    Pointer<TEngine> tEngine,
  );
  external int _Material_hasParameter(
    Pointer<TMaterial> tMaterial,
    Pointer<Char> propertyName,
  );
  external int _MaterialInstance_isStencilWriteEnabled(
    Pointer<TMaterialInstance> materialInstance,
  );
  external void _MaterialInstance_setStencilWrite(
    Pointer<TMaterialInstance> materialInstance,
    bool enabled,
  );
  external void _MaterialInstance_setCullingMode(
    Pointer<TMaterialInstance> materialInstance,
    int culling,
  );
  external void _MaterialInstance_setDepthWrite(
    Pointer<TMaterialInstance> materialInstance,
    bool enabled,
  );
  external void _MaterialInstance_setDepthCulling(
    Pointer<TMaterialInstance> materialInstance,
    bool enabled,
  );
  external void _MaterialInstance_setParameterFloat(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    double value,
  );
  external void _MaterialInstance_setParameterFloat2(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    double x,
    double y,
  );
  external void _MaterialInstance_setParameterFloat3(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    double x,
    double y,
    double z,
  );
  external void _MaterialInstance_setParameterFloat3Array(
    Pointer<TMaterialInstance> tMaterialInstance,
    Pointer<Char> propertyName,
    Pointer<Float64> raw,
    int length,
  );
  external void _MaterialInstance_setParameterFloat4(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    double x,
    double y,
    double w,
    double z,
  );
  external void _MaterialInstance_setParameterMat4(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    Pointer<Float64> matrix,
  );
  external void _MaterialInstance_setParameterInt(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    int value,
  );
  external void _MaterialInstance_setParameterBool(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    bool value,
  );
  external void _MaterialInstance_setParameterTexture(
    Pointer<TMaterialInstance> materialInstance,
    Pointer<Char> propertyName,
    Pointer<TTexture> texture,
    Pointer<TTextureSampler> sampler,
  );
  external void _MaterialInstance_setDepthFunc(
    Pointer<TMaterialInstance> materialInstance,
    int depthFunc,
  );
  external void _MaterialInstance_setStencilOpStencilFail(
    Pointer<TMaterialInstance> materialInstance,
    int op,
    int face,
  );
  external void _MaterialInstance_setStencilOpDepthFail(
    Pointer<TMaterialInstance> materialInstance,
    int op,
    int face,
  );
  external void _MaterialInstance_setStencilOpDepthStencilPass(
    Pointer<TMaterialInstance> materialInstance,
    int op,
    int face,
  );
  external void _MaterialInstance_setStencilCompareFunction(
    Pointer<TMaterialInstance> materialInstance,
    int func,
    int face,
  );
  external void _MaterialInstance_setStencilReferenceValue(
    Pointer<TMaterialInstance> materialInstance,
    int value,
    int face,
  );
  external void _MaterialInstance_setStencilReadMask(
    Pointer<TMaterialInstance> materialInstance,
    int mask,
  );
  external void _MaterialInstance_setStencilWriteMask(
    Pointer<TMaterialInstance> materialInstance,
    int mask,
  );
  external void _MaterialInstance_setTransparencyMode(
    Pointer<TMaterialInstance> materialInstance,
    int transparencyMode,
  );
  external void _LightManager_setPosition(
    Pointer<TLightManager> tLightManager,
    EntityId light,
    double x,
    double y,
    double z,
  );
  external void _LightManager_setDirection(
    Pointer<TLightManager> tLightManager,
    EntityId light,
    double x,
    double y,
    double z,
  );
  external int _LightManager_createLight(
    Pointer<TEngine> tEngine,
    Pointer<TLightManager> tLightManager,
    int tLightTtype,
  );
  external void _LightManager_destroyLight(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
  );
  external void _LightManager_setColor(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
    double colorTemperature,
  );
  external void _LightManager_setIntensity(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
    double intensity,
  );
  external void _LightManager_setFalloff(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
    double falloff,
  );
  external void _LightManager_setSpotLightCone(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
    double inner,
    double outer,
  );
  external void _LightManager_setShadowCaster(
    Pointer<TLightManager> tLightManager,
    EntityId entity,
    bool enabled,
  );
  external int _FilamentAsset_getEntityCount(
    Pointer<TFilamentAsset> filamentAsset,
  );
  external void _FilamentAsset_getEntities(
    Pointer<TFilamentAsset> filamentAsset,
    Pointer<Int32> out,
  );
  external Pointer<TGltfAssetLoader> _GltfAssetLoader_create(
    Pointer<TEngine> tEngine,
    Pointer<TMaterialProvider> tMaterialProvider,
    Pointer<TNameComponentManager> tNameComponentManager,
  );
  external Pointer<TFilamentAsset> _GltfAssetLoader_load(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> tAssetLoader,
    Pointer<Uint8> data,
    size_t length,
    int numInstances,
  );
  external Pointer<TMaterialInstance> _GltfAssetLoader_getMaterialInstance(
    Pointer<TRenderableManager> tRenderableManager,
    Pointer<TFilamentAsset> tAsset,
  );
  external Pointer<TMaterialProvider> _GltfAssetLoader_getMaterialProvider(
    Pointer<TGltfAssetLoader> tAssetLoader,
  );
  external int _FilamentAsset_getResourceUriCount(
    Pointer<TFilamentAsset> tFilamentAsset,
  );
  external Pointer<self.PointerClass<Char>> _FilamentAsset_getResourceUris(
    Pointer<TFilamentAsset> tFilamentAsset,
  );
  external void _View_getViewport(
    Pointer<TViewport> TViewport_out,
    Pointer<TView> view,
  );
  external Pointer<TColorGrading> _ColorGrading_create(
    Pointer<TEngine> tEngine,
    int toneMapping,
  );
  external void _View_setColorGrading(
    Pointer<TView> tView,
    Pointer<TColorGrading> tColorGrading,
  );
  external void _View_setBlendMode(
    Pointer<TView> view,
    int blendMode,
  );
  external void _View_setViewport(
    Pointer<TView> view,
    int width,
    int height,
  );
  external void _View_setRenderTarget(
    Pointer<TView> view,
    Pointer<TRenderTarget> renderTarget,
  );
  external void _View_setFrustumCullingEnabled(
    Pointer<TView> view,
    bool enabled,
  );
  external Pointer<TRenderTarget> _View_getRenderTarget(
    Pointer<TView> tView,
  );
  external void _View_setPostProcessing(
    Pointer<TView> tView,
    bool enabled,
  );
  external void _View_setShadowsEnabled(
    Pointer<TView> tView,
    bool enabled,
  );
  external void _View_setShadowType(
    Pointer<TView> tView,
    int shadowType,
  );
  external void _View_setSoftShadowOptions(
    Pointer<TView> tView,
    double penumbraScale,
    double penumbraRatioScale,
  );
  external void _View_setBloom(
    Pointer<TView> tView,
    bool enabled,
    double strength,
  );
  external void _View_setRenderQuality(
    Pointer<TView> tView,
    int qualityLevel,
  );
  external void _View_setAntiAliasing(
    Pointer<TView> tView,
    bool msaa,
    bool fxaa,
    bool taa,
  );
  external void _View_setLayerEnabled(
    Pointer<TView> tView,
    int layer,
    bool visible,
  );
  external void _View_setCamera(
    Pointer<TView> tView,
    Pointer<TCamera> tCamera,
  );
  external Pointer<TScene> _View_getScene(
    Pointer<TView> tView,
  );
  external Pointer<TCamera> _View_getCamera(
    Pointer<TView> tView,
  );
  external void _View_setStencilBufferEnabled(
    Pointer<TView> tView,
    bool enabled,
  );
  external int _View_isStencilBufferEnabled(
    Pointer<TView> tView,
  );
  external void _View_setDitheringEnabled(
    Pointer<TView> tView,
    bool enabled,
  );
  external int _View_isDitheringEnabled(
    Pointer<TView> tView,
  );
  external void _View_setScene(
    Pointer<TView> tView,
    Pointer<TScene> tScene,
  );
  external void _View_setFrontFaceWindingInverted(
    Pointer<TView> tView,
    bool inverted,
  );
  external void _View_setFogOptions(
    Pointer<TView> tView,
    Pointer<TFogOptions> tFogOptionsPtr,
  );
  external void _View_pick(
    Pointer<TView> tView,
    int requestId,
    int x,
    int y,
    PickCallback callback,
  );
  external Pointer<TNameComponentManager> _NameComponentManager_create();
  external Pointer<Char> _NameComponentManager_getName(
    Pointer<TNameComponentManager> tNameComponentManager,
    EntityId entity,
  );
  external void _IndirectLight_setRotation(
    Pointer<TIndirectLight> tIndirectLight,
    Pointer<Float64> rotation,
  );
  external Pointer<TTexture> _Texture_build(
    Pointer<TEngine> engine,
    int width,
    int height,
    int depth,
    int levels,
    int tUsage,
    int import1,
    int sampler,
    int format,
  );
  external size_t _Texture_getLevels(
    Pointer<TTexture> tTexture,
  );
  external int _Texture_loadImage(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
    Pointer<TLinearImage> tImage,
    int bufferFormat,
    int pixelDataType,
    int level,
  );
  external int _Texture_setImage(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
    int level,
    Pointer<Uint8> data,
    size_t size,
    int x_offset,
    int y_offset,
    int z_offset,
    int width,
    int height,
    int depth,
    int bufferFormat,
    int pixelDataType,
  );
  external int _Texture_getWidth(
    Pointer<TTexture> tTexture,
    int level,
  );
  external int _Texture_getHeight(
    Pointer<TTexture> tTexture,
    int level,
  );
  external int _Texture_getDepth(
    Pointer<TTexture> tTexture,
    int level,
  );
  external int _Texture_getUsage(
    Pointer<TTexture> tTexture,
    int level,
  );
  external void _Texture_generateMipMaps(
    Pointer<TTexture> tTexture,
    Pointer<TEngine> tEngine,
  );
  external Pointer<TKtx1Bundle> _Ktx1Bundle_create(
    Pointer<Uint8> ktxData,
    size_t length,
  );
  external void _Ktx1Bundle_getSphericalHarmonics(
    Pointer<TKtx1Bundle> tBundle,
    Pointer<Float32> harmonics,
  );
  external int _Ktx1Bundle_isCubemap(
    Pointer<TKtx1Bundle> tBundle,
  );
  external void _Ktx1Bundle_destroy(
    Pointer<TKtx1Bundle> tBundle,
  );
  external Pointer<TTexture> _Ktx1Reader_createTexture(
    Pointer<TEngine> tEngine,
    Pointer<TKtx1Bundle> tBundle,
    int requestId,
    VoidCallback onTextureUploadComplete,
  );
  external Pointer<TLinearImage> _Image_createEmpty(
    int width,
    int height,
    int channel,
  );
  external Pointer<TLinearImage> _Image_decode(
    Pointer<Uint8> data,
    size_t length,
    Pointer<Char> name,
    bool alpha,
  );
  external Pointer<Float32> _Image_getBytes(
    Pointer<TLinearImage> tLinearImage,
  );
  external void _Image_destroy(
    Pointer<TLinearImage> tLinearImage,
  );
  external int _Image_getWidth(
    Pointer<TLinearImage> tLinearImage,
  );
  external int _Image_getHeight(
    Pointer<TLinearImage> tLinearImage,
  );
  external int _Image_getChannels(
    Pointer<TLinearImage> tLinearImage,
  );
  external Pointer<TTexture> _RenderTarget_getColorTexture(
    Pointer<TRenderTarget> tRenderTarget,
  );
  external Pointer<TTexture> _RenderTarget_getDepthTexture(
    Pointer<TRenderTarget> tRenderTarget,
  );
  external Pointer<TTextureSampler> _TextureSampler_create();
  external Pointer<TTextureSampler> _TextureSampler_createWithFiltering(
    int minFilter,
    int magFilter,
    int wrapS,
    int wrapT,
    int wrapR,
  );
  external Pointer<TTextureSampler> _TextureSampler_createWithComparison(
    int compareMode,
    int compareFunc,
  );
  external void _TextureSampler_setMinFilter(
    Pointer<TTextureSampler> sampler,
    int filter,
  );
  external void _TextureSampler_setMagFilter(
    Pointer<TTextureSampler> sampler,
    int filter,
  );
  external void _TextureSampler_setWrapModeS(
    Pointer<TTextureSampler> sampler,
    int mode,
  );
  external void _TextureSampler_setWrapModeT(
    Pointer<TTextureSampler> sampler,
    int mode,
  );
  external void _TextureSampler_setWrapModeR(
    Pointer<TTextureSampler> sampler,
    int mode,
  );
  external void _TextureSampler_setAnisotropy(
    Pointer<TTextureSampler> sampler,
    double anisotropy,
  );
  external void _TextureSampler_setCompareMode(
    Pointer<TTextureSampler> sampler,
    int mode,
    int func,
  );
  external void _TextureSampler_destroy(
    Pointer<TTextureSampler> sampler,
  );
  external void _Gizmo_dummy(
    int t,
  );
  external Pointer<TGizmo> _Gizmo_create(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> assetLoader,
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TNameComponentManager> tNameComponentManager,
    Pointer<TView> tView,
    Pointer<TMaterial> tMaterial,
    int tGizmoType,
  );
  external void _Gizmo_pick(
    Pointer<TGizmo> tGizmo,
    int x,
    int y,
    GizmoPickCallback callback,
  );
  external void _Gizmo_highlight(
    Pointer<TGizmo> tGizmo,
    int axis,
  );
  external void _Gizmo_unhighlight(
    Pointer<TGizmo> tGizmo,
  );
  external Pointer<TMaterialInstance> _MaterialProvider_createMaterialInstance(
    Pointer<TMaterialProvider> provider,
    bool doubleSided,
    bool unlit,
    bool hasVertexColors,
    bool hasBaseColorTexture,
    bool hasNormalTexture,
    bool hasOcclusionTexture,
    bool hasEmissiveTexture,
    bool useSpecularGlossiness,
    int alphaMode,
    bool enableDiagnostics,
    bool hasMetallicRoughnessTexture,
    int metallicRoughnessUV,
    bool hasSpecularGlossinessTexture,
    int specularGlossinessUV,
    int baseColorUV,
    bool hasClearCoatTexture,
    int clearCoatUV,
    bool hasClearCoatRoughnessTexture,
    int clearCoatRoughnessUV,
    bool hasClearCoatNormalTexture,
    int clearCoatNormalUV,
    bool hasClearCoat,
    bool hasTransmission,
    bool hasTextureTransforms,
    int emissiveUV,
    int aoUV,
    int normalUV,
    bool hasTransmissionTexture,
    int transmissionUV,
    bool hasSheenColorTexture,
    int sheenColorUV,
    bool hasSheenRoughnessTexture,
    int sheenRoughnessUV,
    bool hasVolumeThicknessTexture,
    int volumeThicknessUV,
    bool hasSheen,
    bool hasIOR,
    bool hasVolume,
  );
  external Pointer<TRenderTarget> _RenderTarget_create(
    Pointer<TEngine> tEngine,
    int width,
    int height,
    Pointer<TTexture> color,
    Pointer<TTexture> depth,
  );
  external void _RenderTarget_destroy(
    Pointer<TEngine> tEngine,
    Pointer<TRenderTarget> tRenderTarget,
  );
  external void _Scene_addEntity(
    Pointer<TScene> tScene,
    EntityId entityId,
  );
  external void _Scene_removeEntity(
    Pointer<TScene> tScene,
    EntityId entityId,
  );
  external void _Scene_setSkybox(
    Pointer<TScene> tScene,
    Pointer<TSkybox> skybox,
  );
  external void _Scene_setIndirectLight(
    Pointer<TScene> tScene,
    Pointer<TIndirectLight> tIndirectLight,
  );
  external void _Scene_addFilamentAsset(
    Pointer<TScene> tScene,
    Pointer<TFilamentAsset> asset,
  );
  external void _Camera_setExposure(
    Pointer<TCamera> camera,
    double aperture,
    double shutterSpeed,
    double sensitivity,
  );
  external void _Camera_getModelMatrix(
    Pointer<double4x4> double4x4_out,
    Pointer<TCamera> camera,
  );
  external void _Camera_getViewMatrix(
    Pointer<double4x4> double4x4_out,
    Pointer<TCamera> camera,
  );
  external void _Camera_getProjectionMatrix(
    Pointer<double4x4> double4x4_out,
    Pointer<TCamera> camera,
  );
  external void _Camera_getCullingProjectionMatrix(
    Pointer<double4x4> double4x4_out,
    Pointer<TCamera> camera,
  );
  external void _Camera_getFrustum(
    Pointer<TCamera> camera,
    Pointer<Float64> out,
  );
  external void _Camera_setProjectionMatrix(
    Pointer<TCamera> camera,
    Pointer<Float64> matrix,
    double near,
    double far,
  );
  external void _Camera_setProjectionFromFov(
    Pointer<TCamera> camera,
    double fovInDegrees,
    double aspect,
    double near,
    double far,
    bool horizontal,
  );
  external double _Camera_getFocalLength(
    Pointer<TCamera> camera,
  );
  external void _Camera_lookAt(
    Pointer<TCamera> camera,
    Pointer<double3> eyePtr,
    Pointer<double3> focusPtr,
    Pointer<double3> upPtr,
  );
  external double _Camera_getNear(
    Pointer<TCamera> camera,
  );
  external double _Camera_getCullingFar(
    Pointer<TCamera> camera,
  );
  external double _Camera_getFov(
    Pointer<TCamera> camera,
    bool horizontal,
  );
  external double _Camera_getFocusDistance(
    Pointer<TCamera> camera,
  );
  external void _Camera_setFocusDistance(
    Pointer<TCamera> camera,
    double focusDistance,
  );
  external void _Camera_setCustomProjectionWithCulling(
    Pointer<TCamera> camera,
    Pointer<double4x4> projectionMatrixPtr,
    double near,
    double far,
  );
  external void _Camera_setModelMatrix(
    Pointer<TCamera> camera,
    Pointer<Float64> tModelMatrix,
  );
  external void _Camera_setLensProjection(
    Pointer<TCamera> camera,
    double near,
    double far,
    double aspect,
    double focalLength,
  );
  external EntityId _Camera_getEntity(
    Pointer<TCamera> camera,
  );
  external void _Camera_setProjection(
    Pointer<TCamera> tCamera,
    int projection,
    double left,
    double right,
    double bottom,
    double top,
    double near,
    double far,
  );
  external void _TransformManager_getLocalTransform(
    Pointer<double4x4> double4x4_out,
    Pointer<TTransformManager> tTransformManager,
    EntityId entityId,
  );
  external void _TransformManager_getWorldTransform(
    Pointer<double4x4> double4x4_out,
    Pointer<TTransformManager> tTransformManager,
    EntityId entityId,
  );
  external void _TransformManager_setTransform(
    Pointer<TTransformManager> tTransformManager,
    EntityId entityId,
    Pointer<double4x4> transformPtr,
  );
  external int _TransformManager_transformToUnitCube(
    Pointer<TTransformManager> tTransformManager,
    EntityId entityId,
    Pointer<Aabb3> boundingBoxPtr,
  );
  external void _TransformManager_setParent(
    Pointer<TTransformManager> tTransformManager,
    EntityId child,
    EntityId parent,
    bool preserveScaling,
  );
  external EntityId _TransformManager_getParent(
    Pointer<TTransformManager> tTransformManager,
    EntityId child,
  );
  external EntityId _TransformManager_getAncestor(
    Pointer<TTransformManager> tTransformManager,
    EntityId childEntityId,
  );
  external void _TransformManager_createComponent(
    Pointer<TTransformManager> tTransformManager,
    EntityId entity,
  );
  external void _Renderer_setClearOptions(
    Pointer<TRenderer> tRenderer,
    double clearR,
    double clearG,
    double clearB,
    double clearA,
    int clearStencil,
    bool clear,
    bool discard,
  );
  external int _Renderer_beginFrame(
    Pointer<TRenderer> tRenderer,
    Pointer<TSwapChain> tSwapChain,
    JSBigInt frameTimeInNanos,
  );
  external void _Renderer_endFrame(
    Pointer<TRenderer> tRenderer,
  );
  external void _Renderer_render(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
  );
  external void _Renderer_renderStandaloneView(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
  );
  external void _Renderer_readPixels(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
    Pointer<TRenderTarget> tRenderTarget,
    int tPixelBufferFormat,
    int tPixelDataType,
    Pointer<Uint8> out,
    size_t outLength,
  );
  external void _Renderer_setFrameInterval(
    Pointer<TRenderer> tRenderer,
    double headRoomRatio,
    double scaleRate,
    int history,
    int interval,
  );
  external Pointer<TRenderTicker> _RenderTicker_create(
    Pointer<TEngine> tEngine,
    Pointer<TRenderer> tRenderer,
  );
  external void _RenderTicker_destroy(
    Pointer<TRenderTicker> tRenderTicker,
  );
  external void _RenderTicker_addAnimationManager(
    Pointer<TRenderTicker> tRenderTicker,
    Pointer<TAnimationManager> tAnimationManager,
  );
  external void _RenderTicker_removeAnimationManager(
    Pointer<TRenderTicker> tRenderTicker,
    Pointer<TAnimationManager> tAnimationManager,
  );
  external void _RenderTicker_render(
    Pointer<TRenderTicker> tRenderTicker,
    JSBigInt frameTimeInNanos,
  );
  external void _RenderTicker_setRenderable(
    Pointer<TRenderTicker> tRenderTicker,
    Pointer<TSwapChain> swapChain,
    Pointer<self.PointerClass<TView>> views,
    int numViews,
  );
  external Pointer<TEngine> _Engine_create(
    int backend,
    Pointer<Void> platform,
    Pointer<Void> sharedContext,
    int stereoscopicEyeCount,
    bool disableHandleUseAfterFreeCheck,
  );
  external void _Engine_destroy(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TRenderer> _Engine_createRenderer(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TSwapChain> _Engine_createSwapChain(
    Pointer<TEngine> tEngine,
    Pointer<Void> window,
    JSBigInt flags,
  );
  external Pointer<TSwapChain> _Engine_createHeadlessSwapChain(
    Pointer<TEngine> tEngine,
    int width,
    int height,
    JSBigInt flags,
  );
  external void _Engine_destroySwapChain(
    Pointer<TEngine> tEngine,
    Pointer<TSwapChain> tSwapChain,
  );
  external void _Engine_destroyView(
    Pointer<TEngine> tEngine,
    Pointer<TView> tView,
  );
  external void _Engine_destroyScene(
    Pointer<TEngine> tEngine,
    Pointer<TScene> tScene,
  );
  external void _Engine_destroyColorGrading(
    Pointer<TEngine> tEngine,
    Pointer<TColorGrading> tColorGrading,
  );
  external Pointer<TCamera> _Engine_createCamera(
    Pointer<TEngine> tEngine,
  );
  external void _Engine_destroyCamera(
    Pointer<TEngine> tEngine,
    Pointer<TCamera> tCamera,
  );
  external Pointer<TView> _Engine_createView(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TCamera> _Engine_getCameraComponent(
    Pointer<TEngine> tEngine,
    EntityId entityId,
  );
  external Pointer<TTransformManager> _Engine_getTransformManager(
    Pointer<TEngine> engine,
  );
  external Pointer<TRenderableManager> _Engine_getRenderableManager(
    Pointer<TEngine> engine,
  );
  external Pointer<TLightManager> _Engine_getLightManager(
    Pointer<TEngine> engine,
  );
  external Pointer<TEntityManager> _Engine_getEntityManager(
    Pointer<TEngine> engine,
  );
  external void _Engine_destroyTexture(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
  );
  external Pointer<TFence> _Engine_createFence(
    Pointer<TEngine> tEngine,
  );
  external void _Engine_destroyFence(
    Pointer<TEngine> tEngine,
    Pointer<TFence> tFence,
  );
  external void _Engine_flushAndWait(
    Pointer<TEngine> tEngine,
  );
  external void _Engine_execute(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TMaterial> _Engine_buildMaterial(
    Pointer<TEngine> tEngine,
    Pointer<Uint8> materialData,
    size_t length,
  );
  external void _Engine_destroyMaterial(
    Pointer<TEngine> tEngine,
    Pointer<TMaterial> tMaterial,
  );
  external void _Engine_destroyMaterialInstance(
    Pointer<TEngine> tEngine,
    Pointer<TMaterialInstance> tMaterialInstance,
  );
  external Pointer<TScene> _Engine_createScene(
    Pointer<TEngine> tEngine,
  );
  external Pointer<TSkybox> _Engine_buildSkybox(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
  );
  external Pointer<TIndirectLight>
      _Engine_buildIndirectLightFromIrradianceTexture(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tReflectionsTexture,
    Pointer<TTexture> tIrradianceTexture,
    double intensity,
  );
  external Pointer<TIndirectLight>
      _Engine_buildIndirectLightFromIrradianceHarmonics(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tReflectionsTexture,
    Pointer<Float32> irradianceHarmonics,
    double intensity,
  );
  external void _Engine_destroySkybox(
    Pointer<TEngine> tEngine,
    Pointer<TSkybox> tSkybox,
  );
  external void _Engine_destroyIndirectLight(
    Pointer<TEngine> tEngine,
    Pointer<TIndirectLight> tIndirectLight,
  );
  external EntityId _EntityManager_createEntity(
    Pointer<TEntityManager> tEntityManager,
  );
  external void _Fence_waitAndDestroy(
    Pointer<TFence> tFence,
  );
  external void _RenderThread_create();
  external void _RenderThread_destroy();
  external void _RenderThread_requestFrameAsync();
  external void _RenderThread_setRenderTicker(
    Pointer<TRenderTicker> tRenderTicker,
  );
  external void _RenderThread_addTask(
    Pointer<self.NativeFunction<void Function()>> task,
  );
  external void _RenderTicker_renderRenderThread(
    Pointer<TRenderTicker> tRenderTicker,
    JSBigInt frameTimeInNanos,
    int requestId,
    VoidCallback onComplete,
  );
  external void _AnimationManager_createRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TScene> tScene,
    Pointer<self.NativeFunction<void Function(PointerClass<TAnimationManager>)>>
        onComplete,
  );
  external void _Engine_createRenderThread(
    int backend,
    Pointer<Void> platform,
    Pointer<Void> sharedContext,
    int stereoscopicEyeCount,
    bool disableHandleUseAfterFreeCheck,
    Pointer<self.NativeFunction<void Function(PointerClass<TEngine>)>>
        onComplete,
  );
  external void _Engine_createRendererRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TRenderer>)>>
        onComplete,
  );
  external void _Engine_createSwapChainRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<Void> window,
    JSBigInt flags,
    Pointer<self.NativeFunction<void Function(PointerClass<TSwapChain>)>>
        onComplete,
  );
  external void _Engine_createHeadlessSwapChainRenderThread(
    Pointer<TEngine> tEngine,
    int width,
    int height,
    JSBigInt flags,
    Pointer<self.NativeFunction<void Function(PointerClass<TSwapChain>)>>
        onComplete,
  );
  external void _Engine_createCameraRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TCamera>)>>
        onComplete,
  );
  external void _Engine_createViewRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TView>)>> onComplete,
  );
  external void _Engine_buildMaterialRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<Uint8> materialData,
    size_t length,
    Pointer<self.NativeFunction<void Function(PointerClass<TMaterial>)>>
        onComplete,
  );
  external void _Engine_destroyRenderThread(
    Pointer<TEngine> tEngine,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroySwapChainRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TSwapChain> tSwapChain,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyViewRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TView> tView,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroySceneRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TScene> tScene,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyColorGradingRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TColorGrading> tColorGrading,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyMaterialRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TMaterial> tMaterial,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyMaterialInstanceRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TMaterialInstance> tMaterialInstance,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroySkyboxRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TSkybox> tSkybox,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyIndirectLightRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TIndirectLight> tIndirectLight,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Texture_buildRenderThread(
    Pointer<TEngine> engine,
    int width,
    int height,
    int depth,
    int levels,
    int tUsage,
    int import1,
    int sampler,
    int format,
    Pointer<self.NativeFunction<void Function(PointerClass<TTexture>)>>
        onComplete,
  );
  external void _Texture_generateMipMapsRenderThread(
    Pointer<TTexture> tTexture,
    Pointer<TEngine> tEngine,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Ktx1Reader_createTextureRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TKtx1Bundle> tBundle,
    int requestId,
    VoidCallback onTextureUploadComplete,
    Pointer<self.NativeFunction<void Function(PointerClass<TTexture>)>>
        onComplete,
  );
  external void _Engine_destroyTextureRenderThread(
    Pointer<TEngine> engine,
    Pointer<TTexture> tTexture,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_createFenceRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TFence>)>>
        onComplete,
  );
  external void _Fence_waitAndDestroyRenderThread(
    Pointer<TFence> tFence,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_destroyFenceRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TFence> tFence,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_flushAndWaitRenderThread(
    Pointer<TEngine> tEngine,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_executeRenderThread(
    Pointer<TEngine> tEngine,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Engine_buildSkyboxRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
    Pointer<self.NativeFunction<void Function(PointerClass<TSkybox>)>>
        onComplete,
  );
  external void _Engine_buildIndirectLightFromIrradianceTextureRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tReflectionsTexture,
    Pointer<TTexture> tIrradianceTexture,
    double intensity,
    Pointer<self.NativeFunction<void Function(PointerClass<TIndirectLight>)>>
        onComplete,
  );
  external void _Engine_buildIndirectLightFromIrradianceHarmonicsRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tReflectionsTexture,
    Pointer<Float32> harmonics,
    double intensity,
    Pointer<self.NativeFunction<void Function(PointerClass<TIndirectLight>)>>
        onComplete,
  );
  external void _Renderer_setClearOptionsRenderThread(
    Pointer<TRenderer> tRenderer,
    double clearR,
    double clearG,
    double clearB,
    double clearA,
    int clearStencil,
    bool clear,
    bool discard,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Renderer_beginFrameRenderThread(
    Pointer<TRenderer> tRenderer,
    Pointer<TSwapChain> tSwapChain,
    JSBigInt frameTimeInNanos,
    Pointer<self.NativeFunction<void Function(bool)>> onComplete,
  );
  external void _Renderer_endFrameRenderThread(
    Pointer<TRenderer> tRenderer,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Renderer_renderRenderThread(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Renderer_renderStandaloneViewRenderThread(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Renderer_readPixelsRenderThread(
    Pointer<TRenderer> tRenderer,
    Pointer<TView> tView,
    Pointer<TRenderTarget> tRenderTarget,
    int tPixelBufferFormat,
    int tPixelDataType,
    Pointer<Uint8> out,
    size_t outLength,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Material_createInstanceRenderThread(
    Pointer<TMaterial> tMaterial,
    Pointer<self.NativeFunction<void Function(PointerClass<TMaterialInstance>)>>
        onComplete,
  );
  external void _Material_createImageMaterialRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TMaterial>)>>
        onComplete,
  );
  external void _Material_createGizmoMaterialRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<self.NativeFunction<void Function(PointerClass<TMaterial>)>>
        onComplete,
  );
  external void _ColorGrading_createRenderThread(
    Pointer<TEngine> tEngine,
    int toneMapping,
    Pointer<self.NativeFunction<void Function(PointerClass<TColorGrading>)>>
        callback,
  );
  external void _View_pickRenderThread(
    Pointer<TView> tView,
    int requestId,
    int x,
    int y,
    PickCallback callback,
  );
  external void _View_setColorGradingRenderThread(
    Pointer<TView> tView,
    Pointer<TColorGrading> tColorGrading,
    int requestId,
    VoidCallback onComplete,
  );
  external void _View_setBloomRenderThread(
    Pointer<TView> tView,
    bool enabled,
    double strength,
    int requestId,
    VoidCallback onComplete,
  );
  external void _View_setCameraRenderThread(
    Pointer<TView> tView,
    Pointer<TCamera> tCamera,
    int requestId,
    VoidCallback onComplete,
  );
  external void _SceneAsset_destroyRenderThread(
    Pointer<TSceneAsset> tSceneAsset,
    int requestId,
    VoidCallback onComplete,
  );
  external void _SceneAsset_createFromFilamentAssetRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> tAssetLoader,
    Pointer<TNameComponentManager> tNameComponentManager,
    Pointer<TFilamentAsset> tFilamentAsset,
    Pointer<self.NativeFunction<void Function(PointerClass<TSceneAsset>)>>
        onComplete,
  );
  external void _SceneAsset_createInstanceRenderThread(
    Pointer<TSceneAsset> asset,
    Pointer<self.PointerClass<TMaterialInstance>> tMaterialInstances,
    int materialInstanceCount,
    Pointer<self.NativeFunction<void Function(PointerClass<TSceneAsset>)>>
        callback,
  );
  external void _SceneAsset_createGeometryRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<Float32> vertices,
    int numVertices,
    Pointer<Float32> normals,
    int numNormals,
    Pointer<Float32> uvs,
    int numUvs,
    Pointer<Uint16> indices,
    int numIndices,
    int tPrimitiveType,
    Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
    int materialInstanceCount,
    Pointer<self.NativeFunction<void Function(PointerClass<TSceneAsset>)>>
        callback,
  );
  external void _MaterialProvider_createMaterialInstanceRenderThread(
    Pointer<TMaterialProvider> tMaterialProvider,
    bool doubleSided,
    bool unlit,
    bool hasVertexColors,
    bool hasBaseColorTexture,
    bool hasNormalTexture,
    bool hasOcclusionTexture,
    bool hasEmissiveTexture,
    bool useSpecularGlossiness,
    int alphaMode,
    bool enableDiagnostics,
    bool hasMetallicRoughnessTexture,
    int metallicRoughnessUV,
    bool hasSpecularGlossinessTexture,
    int specularGlossinessUV,
    int baseColorUV,
    bool hasClearCoatTexture,
    int clearCoatUV,
    bool hasClearCoatRoughnessTexture,
    int clearCoatRoughnessUV,
    bool hasClearCoatNormalTexture,
    int clearCoatNormalUV,
    bool hasClearCoat,
    bool hasTransmission,
    bool hasTextureTransforms,
    int emissiveUV,
    int aoUV,
    int normalUV,
    bool hasTransmissionTexture,
    int transmissionUV,
    bool hasSheenColorTexture,
    int sheenColorUV,
    bool hasSheenRoughnessTexture,
    int sheenRoughnessUV,
    bool hasVolumeThicknessTexture,
    int volumeThicknessUV,
    bool hasSheen,
    bool hasIOR,
    bool hasVolume,
    Pointer<self.NativeFunction<void Function(PointerClass<TMaterialInstance>)>>
        callback,
  );
  external void _AnimationManager_updateBoneMatricesRenderThread(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    Pointer<self.NativeFunction<void Function(bool)>> callback,
  );
  external void _AnimationManager_setMorphTargetWeightsRenderThread(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
    Pointer<Float32> morphData,
    int numWeights,
    Pointer<self.NativeFunction<void Function(bool)>> callback,
  );
  external void _Image_createEmptyRenderThread(
    int width,
    int height,
    int channel,
    Pointer<self.NativeFunction<void Function(PointerClass<TLinearImage>)>>
        onComplete,
  );
  external void _Image_decodeRenderThread(
    Pointer<Uint8> data,
    size_t length,
    Pointer<Char> name,
    bool alpha,
    Pointer<self.NativeFunction<void Function(PointerClass<TLinearImage>)>>
        onComplete,
  );
  external void _Image_getBytesRenderThread(
    Pointer<TLinearImage> tLinearImage,
    Pointer<self.NativeFunction<void Function(PointerClass<Float32>)>>
        onComplete,
  );
  external void _Image_destroyRenderThread(
    Pointer<TLinearImage> tLinearImage,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Image_getWidthRenderThread(
    Pointer<TLinearImage> tLinearImage,
    Pointer<self.NativeFunction<void Function(int)>> onComplete,
  );
  external void _Image_getHeightRenderThread(
    Pointer<TLinearImage> tLinearImage,
    Pointer<self.NativeFunction<void Function(int)>> onComplete,
  );
  external void _Image_getChannelsRenderThread(
    Pointer<TLinearImage> tLinearImage,
    Pointer<self.NativeFunction<void Function(int)>> onComplete,
  );
  external void _Texture_loadImageRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
    Pointer<TLinearImage> tImage,
    int bufferFormat,
    int pixelDataType,
    int level,
    Pointer<self.NativeFunction<void Function(bool)>> onComplete,
  );
  external void _Texture_setImageRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TTexture> tTexture,
    int level,
    Pointer<Uint8> data,
    size_t size,
    int x_offset,
    int y_offset,
    int z_offset,
    int width,
    int height,
    int depth,
    int bufferFormat,
    int pixelDataType,
    Pointer<self.NativeFunction<void Function(bool)>> onComplete,
  );
  external void _RenderTarget_getColorTextureRenderThread(
    Pointer<TRenderTarget> tRenderTarget,
    Pointer<self.NativeFunction<void Function(PointerClass<TTexture>)>>
        onComplete,
  );
  external void _RenderTarget_createRenderThread(
    Pointer<TEngine> tEngine,
    int width,
    int height,
    Pointer<TTexture> color,
    Pointer<TTexture> depth,
    Pointer<self.NativeFunction<void Function(PointerClass<TRenderTarget>)>>
        onComplete,
  );
  external void _RenderTarget_destroyRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TRenderTarget> tRenderTarget,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_createRenderThread(
    Pointer<self.NativeFunction<void Function(PointerClass<TTextureSampler>)>>
        onComplete,
  );
  external void _TextureSampler_createWithFilteringRenderThread(
    int minFilter,
    int magFilter,
    int wrapS,
    int wrapT,
    int wrapR,
    Pointer<self.NativeFunction<void Function(PointerClass<TTextureSampler>)>>
        onComplete,
  );
  external void _TextureSampler_createWithComparisonRenderThread(
    int compareMode,
    int compareFunc,
    Pointer<self.NativeFunction<void Function(PointerClass<TTextureSampler>)>>
        onComplete,
  );
  external void _TextureSampler_setMinFilterRenderThread(
    Pointer<TTextureSampler> sampler,
    int filter,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setMagFilterRenderThread(
    Pointer<TTextureSampler> sampler,
    int filter,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setWrapModeSRenderThread(
    Pointer<TTextureSampler> sampler,
    int mode,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setWrapModeTRenderThread(
    Pointer<TTextureSampler> sampler,
    int mode,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setWrapModeRRenderThread(
    Pointer<TTextureSampler> sampler,
    int mode,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setAnisotropyRenderThread(
    Pointer<TTextureSampler> sampler,
    double anisotropy,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_setCompareModeRenderThread(
    Pointer<TTextureSampler> sampler,
    int mode,
    int func,
    int requestId,
    VoidCallback onComplete,
  );
  external void _TextureSampler_destroyRenderThread(
    Pointer<TTextureSampler> sampler,
    int requestId,
    VoidCallback onComplete,
  );
  external void _AnimationManager_setBoneTransformRenderThread(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId asset,
    int skinIndex,
    int boneIndex,
    Pointer<Float32> transform,
    Pointer<self.NativeFunction<void Function(bool)>> callback,
  );
  external void _AnimationManager_resetToRestPoseRenderThread(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
    int requestId,
    VoidCallback onComplete,
  );
  external void _GltfAssetLoader_createRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TMaterialProvider> tMaterialProvider,
    Pointer<TNameComponentManager> tNameComponentManager,
    Pointer<self.NativeFunction<void Function(PointerClass<TGltfAssetLoader>)>>
        callback,
  );
  external void _GltfResourceLoader_createRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<
            self
            .NativeFunction<void Function(PointerClass<TGltfResourceLoader>)>>
        callback,
  );
  external void _GltfResourceLoader_destroyRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TGltfResourceLoader> tResourceLoader,
    int requestId,
    VoidCallback onComplete,
  );
  external void _GltfResourceLoader_loadResourcesRenderThread(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TFilamentAsset> tFilamentAsset,
    Pointer<self.NativeFunction<void Function(bool)>> callback,
  );
  external void _GltfResourceLoader_addResourceDataRenderThread(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<Char> uri,
    Pointer<Uint8> data,
    size_t length,
    int requestId,
    VoidCallback onComplete,
  );
  external void _GltfResourceLoader_asyncBeginLoadRenderThread(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TFilamentAsset> tFilamentAsset,
    Pointer<self.NativeFunction<void Function(bool)>> callback,
  );
  external void _GltfResourceLoader_asyncUpdateLoadRenderThread(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
  );
  external void _GltfResourceLoader_asyncGetLoadProgressRenderThread(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<self.NativeFunction<void Function(double)>> callback,
  );
  external void _GltfAssetLoader_loadRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> tAssetLoader,
    Pointer<Uint8> data,
    size_t length,
    int numInstances,
    Pointer<self.NativeFunction<void Function(PointerClass<TFilamentAsset>)>>
        callback,
  );
  external void _Scene_addFilamentAssetRenderThread(
    Pointer<TScene> tScene,
    Pointer<TFilamentAsset> tAsset,
    int requestId,
    VoidCallback onComplete,
  );
  external void _Gizmo_createRenderThread(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> tAssetLoader,
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TNameComponentManager> tNameComponentManager,
    Pointer<TView> tView,
    Pointer<TMaterial> tMaterial,
    int tGizmoType,
    Pointer<self.NativeFunction<void Function(PointerClass<TGizmo>)>> callback,
  );
  external Pointer<TGltfResourceLoader> _GltfResourceLoader_create(
    Pointer<TEngine> tEngine,
  );
  external void _GltfResourceLoader_destroy(
    Pointer<TEngine> tEngine,
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
  );
  external int _GltfResourceLoader_asyncBeginLoad(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TFilamentAsset> tFilamentAsset,
  );
  external void _GltfResourceLoader_asyncUpdateLoad(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
  );
  external double _GltfResourceLoader_asyncGetLoadProgress(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
  );
  external void _GltfResourceLoader_addResourceData(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<Char> uri,
    Pointer<Uint8> data,
    size_t length,
  );
  external int _GltfResourceLoader_loadResources(
    Pointer<TGltfResourceLoader> tGltfResourceLoader,
    Pointer<TFilamentAsset> tFilamentAsset,
  );
  external int _RenderableManager_setMaterialInstanceAt(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    int primitiveIndex,
    Pointer<TMaterialInstance> tMaterialInstance,
  );
  external Pointer<TMaterialInstance> _RenderableManager_getMaterialInstanceAt(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    int primitiveIndex,
  );
  external size_t _RenderableManager_getPrimitiveCount(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external int _RenderableManager_isRenderable(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external int _RenderableManager_hasComponent(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external int _RenderableManager_empty(
    Pointer<TRenderableManager> tRenderableManager,
  );
  external int _RenderableManager_getLightChannel(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    int channel,
  );
  external int _RenderableManager_isShadowCaster(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external void _RenderableManager_setCastShadows(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    bool castShadows,
  );
  external void _RenderableManager_setReceiveShadows(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    bool receiveShadows,
  );
  external int _RenderableManager_isShadowReceiver(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external int _RenderableManager_getFogEnabled(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external void _RenderableManager_getAabb(
    Pointer<Aabb3> Aabb3_out,
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external void _RenderableManager_setVisibilityLayer(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    int layer,
  );
  external void _RenderableManager_setPriority(
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
    int priority,
  );
  external void _RenderableManager_getBoundingBox(
    Pointer<Aabb3> Aabb3_out,
    Pointer<TRenderableManager> tRenderableManager,
    EntityId entityId,
  );
  external Pointer<TSceneAsset> _SceneAsset_createGeometry(
    Pointer<TEngine> tEngine,
    Pointer<Float32> vertices,
    int numVertices,
    Pointer<Float32> normals,
    int numNormals,
    Pointer<Float32> uvs,
    int numUvs,
    Pointer<Uint16> indices,
    int numIndices,
    int tPrimitiveType,
    Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
    int materialInstanceCount,
  );
  external Pointer<TSceneAsset> _SceneAsset_createFromFilamentAsset(
    Pointer<TEngine> tEngine,
    Pointer<TGltfAssetLoader> tAssetLoader,
    Pointer<TNameComponentManager> tNameComponentManager,
    Pointer<TFilamentAsset> tFilamentAsset,
  );
  external Pointer<TFilamentAsset> _SceneAsset_getFilamentAsset(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external Pointer<TSceneAsset> _SceneAsset_createGrid(
    Pointer<TEngine> tEngine,
    Pointer<TMaterial> tMaterial,
  );
  external void _SceneAsset_destroy(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external void _SceneAsset_addToScene(
    Pointer<TSceneAsset> tSceneAsset,
    Pointer<TScene> tScene,
  );
  external void _SceneAsset_removeFromScene(
    Pointer<TSceneAsset> tSceneAsset,
    Pointer<TScene> tScene,
  );
  external EntityId _SceneAsset_getEntity(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external int _SceneAsset_getChildEntityCount(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external void _SceneAsset_getChildEntities(
    Pointer<TSceneAsset> tSceneAsset,
    Pointer<Int32> out,
  );
  external Pointer<Int32> _SceneAsset_getCameraEntities(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external size_t _SceneAsset_getCameraEntityCount(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external Pointer<Int32> _SceneAsset_getLightEntities(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external size_t _SceneAsset_getLightEntityCount(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external Pointer<TSceneAsset> _SceneAsset_getInstance(
    Pointer<TSceneAsset> tSceneAsset,
    int index,
  );
  external size_t _SceneAsset_getInstanceCount(
    Pointer<TSceneAsset> tSceneAsset,
  );
  external Pointer<TSceneAsset> _SceneAsset_createInstance(
    Pointer<TSceneAsset> asset,
    Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
    int materialInstanceCount,
  );
  external void _SceneAsset_getBoundingBox(
    Pointer<Aabb3> Aabb3_out,
    Pointer<TSceneAsset> asset,
  );
  external Pointer<TAnimationManager> _AnimationManager_create(
    Pointer<TEngine> tEngine,
    Pointer<TScene> tScene,
  );
  external void _AnimationManager_update(
    Pointer<TAnimationManager> tAnimationManager,
    JSBigInt frameTimeInNanos,
  );
  external int _AnimationManager_addGltfAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
  );
  external int _AnimationManager_removeGltfAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
  );
  external void _AnimationManager_addMorphAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
  );
  external void _AnimationManager_removeMorphAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
  );
  external int _AnimationManager_addBoneAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
  );
  external int _AnimationManager_removeBoneAnimationComponent(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
  );
  external int _AnimationManager_setMorphAnimation(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
    Pointer<Float32> morphData,
    Pointer<Uint32> morphIndices,
    int numMorphTargets,
    int numFrames,
    double frameLengthInMs,
  );
  external int _AnimationManager_clearMorphAnimation(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
  );
  external void _AnimationManager_resetToRestPose(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
  );
  external int _AnimationManager_addBoneAnimation(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
    int skinIndex,
    int boneIndex,
    Pointer<Float32> frameData,
    int numFrames,
    double frameLengthInMs,
    double fadeOutInSecs,
    double fadeInInSecs,
    double maxDelta,
  );
  external EntityId _AnimationManager_getBone(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int skinIndex,
    int boneIndex,
  );
  external void _AnimationManager_getRestLocalTransforms(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int skinIndex,
    Pointer<Float32> out,
    int numBones,
  );
  external void _AnimationManager_getInverseBindMatrix(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int skinIndex,
    int boneIndex,
    Pointer<Float32> out,
  );
  external int _AnimationManager_playGltfAnimation(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
    int index,
    bool loop,
    bool reverse,
    bool replaceActive,
    double crossfade,
    double startOffset,
  );
  external int _AnimationManager_stopGltfAnimation(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int index,
  );
  external double _AnimationManager_getGltfAnimationDuration(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int animationIndex,
  );
  external int _AnimationManager_getGltfAnimationCount(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
  );
  external void _AnimationManager_getGltfAnimationName(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    Pointer<Char> outPtr,
    int index,
  );
  external int _AnimationManager_getBoneCount(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    int skinIndex,
  );
  external void _AnimationManager_getBoneNames(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    Pointer<self.PointerClass<Char>> out,
    int skinIndex,
  );
  external int _AnimationManager_getMorphTargetNameCount(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    EntityId childEntity,
  );
  external void _AnimationManager_getMorphTargetName(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
    EntityId childEntity,
    Pointer<Char> outPtr,
    int index,
  );
  external int _AnimationManager_updateBoneMatrices(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> sceneAsset,
  );
  external int _AnimationManager_setMorphTargetWeights(
    Pointer<TAnimationManager> tAnimationManager,
    EntityId entityId,
    Pointer<Float32> morphData,
    int numWeights,
  );
  external int _AnimationManager_setGltfAnimationFrame(
    Pointer<TAnimationManager> tAnimationManager,
    Pointer<TSceneAsset> tSceneAsset,
    int animationIndex,
    int frame,
  );
}

void Thermion_resizeCanvas(
  int width,
  int height,
) {
  final result = _lib._Thermion_resizeCanvas(width, height);
  return result;
}

int Thermion_createGLContext() {
  final result = _lib._Thermion_createGLContext();
  return result;
}

int Thermion_getGLContext() {
  final result = _lib._Thermion_getGLContext();
  return result;
}

BigInt get TSWAP_CHAIN_CONFIG_TRANSPARENT {
  final value =
      _lib.getValueBigInt(_lib._TSWAP_CHAIN_CONFIG_TRANSPARENT, "i64");
  return bigIntasUintN(64, value).toDart;
}

BigInt get TSWAP_CHAIN_CONFIG_READABLE {
  final value = _lib.getValueBigInt(_lib._TSWAP_CHAIN_CONFIG_READABLE, "i64");
  return bigIntasUintN(64, value).toDart;
}

BigInt get TSWAP_CHAIN_CONFIG_APPLE_CVPIXELBUFFER {
  final value =
      _lib.getValueBigInt(_lib._TSWAP_CHAIN_CONFIG_APPLE_CVPIXELBUFFER, "i64");
  return bigIntasUintN(64, value).toDart;
}

BigInt get TSWAP_CHAIN_CONFIG_HAS_STENCIL_BUFFER {
  final value =
      _lib.getValueBigInt(_lib._TSWAP_CHAIN_CONFIG_HAS_STENCIL_BUFFER, "i64");
  return bigIntasUintN(64, value).toDart;
}

self.Pointer<TMaterialInstance> Material_createInstance(
  self.Pointer<TMaterial> tMaterial,
) {
  final result = _lib._Material_createInstance(tMaterial.cast());
  return self.Pointer<TMaterialInstance>(result);
}

self.Pointer<TMaterial> Material_createImageMaterial(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Material_createImageMaterial(tEngine.cast());
  return self.Pointer<TMaterial>(result);
}

self.Pointer<TMaterial> Material_createGridMaterial(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Material_createGridMaterial(tEngine.cast());
  return self.Pointer<TMaterial>(result);
}

self.Pointer<TMaterial> Material_createGizmoMaterial(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Material_createGizmoMaterial(tEngine.cast());
  return self.Pointer<TMaterial>(result);
}

bool Material_hasParameter(
  self.Pointer<TMaterial> tMaterial,
  self.Pointer<Char> propertyName,
) {
  final result = _lib._Material_hasParameter(tMaterial.cast(), propertyName);
  return result == 1;
}

bool MaterialInstance_isStencilWriteEnabled(
  self.Pointer<TMaterialInstance> materialInstance,
) {
  final result =
      _lib._MaterialInstance_isStencilWriteEnabled(materialInstance.cast());
  return result == 1;
}

void MaterialInstance_setStencilWrite(
  self.Pointer<TMaterialInstance> materialInstance,
  bool enabled,
) {
  final result =
      _lib._MaterialInstance_setStencilWrite(materialInstance.cast(), enabled);
  return result;
}

void MaterialInstance_setCullingMode(
  self.Pointer<TMaterialInstance> materialInstance,
  int culling,
) {
  final result =
      _lib._MaterialInstance_setCullingMode(materialInstance.cast(), culling);
  return result;
}

void MaterialInstance_setDepthWrite(
  self.Pointer<TMaterialInstance> materialInstance,
  bool enabled,
) {
  final result =
      _lib._MaterialInstance_setDepthWrite(materialInstance.cast(), enabled);
  return result;
}

void MaterialInstance_setDepthCulling(
  self.Pointer<TMaterialInstance> materialInstance,
  bool enabled,
) {
  final result =
      _lib._MaterialInstance_setDepthCulling(materialInstance.cast(), enabled);
  return result;
}

void MaterialInstance_setParameterFloat(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  double value,
) {
  final result = _lib._MaterialInstance_setParameterFloat(
      materialInstance.cast(), propertyName, value);
  return result;
}

void MaterialInstance_setParameterFloat2(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  double x,
  double y,
) {
  final result = _lib._MaterialInstance_setParameterFloat2(
      materialInstance.cast(), propertyName, x, y);
  return result;
}

void MaterialInstance_setParameterFloat3(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  double x,
  double y,
  double z,
) {
  final result = _lib._MaterialInstance_setParameterFloat3(
      materialInstance.cast(), propertyName, x, y, z);
  return result;
}

void MaterialInstance_setParameterFloat3Array(
  self.Pointer<TMaterialInstance> tMaterialInstance,
  self.Pointer<Char> propertyName,
  self.Pointer<Float64> raw,
  int length,
) {
  final result = _lib._MaterialInstance_setParameterFloat3Array(
      tMaterialInstance.cast(), propertyName, raw, length);
  return result;
}

void MaterialInstance_setParameterFloat4(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  double x,
  double y,
  double w,
  double z,
) {
  final result = _lib._MaterialInstance_setParameterFloat4(
      materialInstance.cast(), propertyName, x, y, w, z);
  return result;
}

void MaterialInstance_setParameterMat4(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  self.Pointer<Float64> matrix,
) {
  final result = _lib._MaterialInstance_setParameterMat4(
      materialInstance.cast(), propertyName, matrix);
  return result;
}

void MaterialInstance_setParameterInt(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  int value,
) {
  final result = _lib._MaterialInstance_setParameterInt(
      materialInstance.cast(), propertyName, value);
  return result;
}

void MaterialInstance_setParameterBool(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  bool value,
) {
  final result = _lib._MaterialInstance_setParameterBool(
      materialInstance.cast(), propertyName, value);
  return result;
}

void MaterialInstance_setParameterTexture(
  self.Pointer<TMaterialInstance> materialInstance,
  self.Pointer<Char> propertyName,
  self.Pointer<TTexture> texture,
  self.Pointer<TTextureSampler> sampler,
) {
  final result = _lib._MaterialInstance_setParameterTexture(
      materialInstance.cast(), propertyName, texture.cast(), sampler.cast());
  return result;
}

void MaterialInstance_setDepthFunc(
  self.Pointer<TMaterialInstance> materialInstance,
  int depthFunc,
) {
  final result =
      _lib._MaterialInstance_setDepthFunc(materialInstance.cast(), depthFunc);
  return result;
}

void MaterialInstance_setStencilOpStencilFail(
  self.Pointer<TMaterialInstance> materialInstance,
  int op,
  int face,
) {
  final result = _lib._MaterialInstance_setStencilOpStencilFail(
      materialInstance.cast(), op, face);
  return result;
}

void MaterialInstance_setStencilOpDepthFail(
  self.Pointer<TMaterialInstance> materialInstance,
  int op,
  int face,
) {
  final result = _lib._MaterialInstance_setStencilOpDepthFail(
      materialInstance.cast(), op, face);
  return result;
}

void MaterialInstance_setStencilOpDepthStencilPass(
  self.Pointer<TMaterialInstance> materialInstance,
  int op,
  int face,
) {
  final result = _lib._MaterialInstance_setStencilOpDepthStencilPass(
      materialInstance.cast(), op, face);
  return result;
}

void MaterialInstance_setStencilCompareFunction(
  self.Pointer<TMaterialInstance> materialInstance,
  int func,
  int face,
) {
  final result = _lib._MaterialInstance_setStencilCompareFunction(
      materialInstance.cast(), func, face);
  return result;
}

void MaterialInstance_setStencilReferenceValue(
  self.Pointer<TMaterialInstance> materialInstance,
  int value,
  int face,
) {
  final result = _lib._MaterialInstance_setStencilReferenceValue(
      materialInstance.cast(), value, face);
  return result;
}

void MaterialInstance_setStencilReadMask(
  self.Pointer<TMaterialInstance> materialInstance,
  int mask,
) {
  final result =
      _lib._MaterialInstance_setStencilReadMask(materialInstance.cast(), mask);
  return result;
}

void MaterialInstance_setStencilWriteMask(
  self.Pointer<TMaterialInstance> materialInstance,
  int mask,
) {
  final result =
      _lib._MaterialInstance_setStencilWriteMask(materialInstance.cast(), mask);
  return result;
}

void MaterialInstance_setTransparencyMode(
  self.Pointer<TMaterialInstance> materialInstance,
  int transparencyMode,
) {
  final result = _lib._MaterialInstance_setTransparencyMode(
      materialInstance.cast(), transparencyMode);
  return result;
}

void LightManager_setPosition(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId light,
  double x,
  double y,
  double z,
) {
  final result =
      _lib._LightManager_setPosition(tLightManager.cast(), light, x, y, z);
  return result;
}

void LightManager_setDirection(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId light,
  double x,
  double y,
  double z,
) {
  final result =
      _lib._LightManager_setDirection(tLightManager.cast(), light, x, y, z);
  return result;
}

int LightManager_createLight(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TLightManager> tLightManager,
  int tLightTtype,
) {
  final result = _lib._LightManager_createLight(
      tEngine.cast(), tLightManager.cast(), tLightTtype);
  return result;
}

void LightManager_destroyLight(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
) {
  final result = _lib._LightManager_destroyLight(tLightManager.cast(), entity);
  return result;
}

void LightManager_setColor(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
  double colorTemperature,
) {
  final result = _lib._LightManager_setColor(
      tLightManager.cast(), entity, colorTemperature);
  return result;
}

void LightManager_setIntensity(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
  double intensity,
) {
  final result =
      _lib._LightManager_setIntensity(tLightManager.cast(), entity, intensity);
  return result;
}

void LightManager_setFalloff(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
  double falloff,
) {
  final result =
      _lib._LightManager_setFalloff(tLightManager.cast(), entity, falloff);
  return result;
}

void LightManager_setSpotLightCone(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
  double inner,
  double outer,
) {
  final result = _lib._LightManager_setSpotLightCone(
      tLightManager.cast(), entity, inner, outer);
  return result;
}

void LightManager_setShadowCaster(
  self.Pointer<TLightManager> tLightManager,
  DartEntityId entity,
  bool enabled,
) {
  final result =
      _lib._LightManager_setShadowCaster(tLightManager.cast(), entity, enabled);
  return result;
}

int FilamentAsset_getEntityCount(
  self.Pointer<TFilamentAsset> filamentAsset,
) {
  final result = _lib._FilamentAsset_getEntityCount(filamentAsset.cast());
  return result;
}

void FilamentAsset_getEntities(
  self.Pointer<TFilamentAsset> filamentAsset,
  self.Pointer<Int32> out,
) {
  final result = _lib._FilamentAsset_getEntities(filamentAsset.cast(), out);
  return result;
}

self.Pointer<TGltfAssetLoader> GltfAssetLoader_create(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterialProvider> tMaterialProvider,
  self.Pointer<TNameComponentManager> tNameComponentManager,
) {
  final result = _lib._GltfAssetLoader_create(
      tEngine.cast(), tMaterialProvider.cast(), tNameComponentManager.cast());
  return self.Pointer<TGltfAssetLoader>(result);
}

self.Pointer<TFilamentAsset> GltfAssetLoader_load(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> tAssetLoader,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
  int numInstances,
) {
  final result = _lib._GltfAssetLoader_load(
      tEngine.cast(), tAssetLoader.cast(), data, length, numInstances);
  return self.Pointer<TFilamentAsset>(result);
}

self.Pointer<TMaterialInstance> GltfAssetLoader_getMaterialInstance(
  self.Pointer<TRenderableManager> tRenderableManager,
  self.Pointer<TFilamentAsset> tAsset,
) {
  final result = _lib._GltfAssetLoader_getMaterialInstance(
      tRenderableManager.cast(), tAsset.cast());
  return self.Pointer<TMaterialInstance>(result);
}

self.Pointer<TMaterialProvider> GltfAssetLoader_getMaterialProvider(
  self.Pointer<TGltfAssetLoader> tAssetLoader,
) {
  final result = _lib._GltfAssetLoader_getMaterialProvider(tAssetLoader.cast());
  return self.Pointer<TMaterialProvider>(result);
}

int FilamentAsset_getResourceUriCount(
  self.Pointer<TFilamentAsset> tFilamentAsset,
) {
  final result = _lib._FilamentAsset_getResourceUriCount(tFilamentAsset.cast());
  return result;
}

self.Pointer<self.PointerClass<Char>> FilamentAsset_getResourceUris(
  self.Pointer<TFilamentAsset> tFilamentAsset,
) {
  final result = _lib._FilamentAsset_getResourceUris(tFilamentAsset.cast());
  return self.Pointer<self.PointerClass<Char>>(result);
}

TViewport View_getViewport(
  self.Pointer<TView> view,
) {
  final TViewport_out = TViewport.stackAlloc();
  final result = _lib._View_getViewport(TViewport_out.cast(), view.cast());
  return TViewport_out.toDart();
}

self.Pointer<TColorGrading> ColorGrading_create(
  self.Pointer<TEngine> tEngine,
  int toneMapping,
) {
  final result = _lib._ColorGrading_create(tEngine.cast(), toneMapping);
  return self.Pointer<TColorGrading>(result);
}

void View_setColorGrading(
  self.Pointer<TView> tView,
  self.Pointer<TColorGrading> tColorGrading,
) {
  final result = _lib._View_setColorGrading(tView.cast(), tColorGrading.cast());
  return result;
}

void View_setBlendMode(
  self.Pointer<TView> view,
  int blendMode,
) {
  final result = _lib._View_setBlendMode(view.cast(), blendMode);
  return result;
}

void View_setViewport(
  self.Pointer<TView> view,
  int width,
  int height,
) {
  final result = _lib._View_setViewport(view.cast(), width, height);
  return result;
}

void View_setRenderTarget(
  self.Pointer<TView> view,
  self.Pointer<TRenderTarget> renderTarget,
) {
  final result = _lib._View_setRenderTarget(view.cast(), renderTarget.cast());
  return result;
}

void View_setFrustumCullingEnabled(
  self.Pointer<TView> view,
  bool enabled,
) {
  final result = _lib._View_setFrustumCullingEnabled(view.cast(), enabled);
  return result;
}

self.Pointer<TRenderTarget> View_getRenderTarget(
  self.Pointer<TView> tView,
) {
  final result = _lib._View_getRenderTarget(tView.cast());
  return self.Pointer<TRenderTarget>(result);
}

void View_setPostProcessing(
  self.Pointer<TView> tView,
  bool enabled,
) {
  final result = _lib._View_setPostProcessing(tView.cast(), enabled);
  return result;
}

void View_setShadowsEnabled(
  self.Pointer<TView> tView,
  bool enabled,
) {
  final result = _lib._View_setShadowsEnabled(tView.cast(), enabled);
  return result;
}

void View_setShadowType(
  self.Pointer<TView> tView,
  int shadowType,
) {
  final result = _lib._View_setShadowType(tView.cast(), shadowType);
  return result;
}

void View_setSoftShadowOptions(
  self.Pointer<TView> tView,
  double penumbraScale,
  double penumbraRatioScale,
) {
  final result = _lib._View_setSoftShadowOptions(
      tView.cast(), penumbraScale, penumbraRatioScale);
  return result;
}

void View_setBloom(
  self.Pointer<TView> tView,
  bool enabled,
  double strength,
) {
  final result = _lib._View_setBloom(tView.cast(), enabled, strength);
  return result;
}

void View_setRenderQuality(
  self.Pointer<TView> tView,
  int qualityLevel,
) {
  final result = _lib._View_setRenderQuality(tView.cast(), qualityLevel);
  return result;
}

void View_setAntiAliasing(
  self.Pointer<TView> tView,
  bool msaa,
  bool fxaa,
  bool taa,
) {
  final result = _lib._View_setAntiAliasing(tView.cast(), msaa, fxaa, taa);
  return result;
}

void View_setLayerEnabled(
  self.Pointer<TView> tView,
  int layer,
  bool visible,
) {
  final result = _lib._View_setLayerEnabled(tView.cast(), layer, visible);
  return result;
}

void View_setCamera(
  self.Pointer<TView> tView,
  self.Pointer<TCamera> tCamera,
) {
  final result = _lib._View_setCamera(tView.cast(), tCamera.cast());
  return result;
}

self.Pointer<TScene> View_getScene(
  self.Pointer<TView> tView,
) {
  final result = _lib._View_getScene(tView.cast());
  return self.Pointer<TScene>(result);
}

self.Pointer<TCamera> View_getCamera(
  self.Pointer<TView> tView,
) {
  final result = _lib._View_getCamera(tView.cast());
  return self.Pointer<TCamera>(result);
}

void View_setStencilBufferEnabled(
  self.Pointer<TView> tView,
  bool enabled,
) {
  final result = _lib._View_setStencilBufferEnabled(tView.cast(), enabled);
  return result;
}

bool View_isStencilBufferEnabled(
  self.Pointer<TView> tView,
) {
  final result = _lib._View_isStencilBufferEnabled(tView.cast());
  return result == 1;
}

void View_setDitheringEnabled(
  self.Pointer<TView> tView,
  bool enabled,
) {
  final result = _lib._View_setDitheringEnabled(tView.cast(), enabled);
  return result;
}

bool View_isDitheringEnabled(
  self.Pointer<TView> tView,
) {
  final result = _lib._View_isDitheringEnabled(tView.cast());
  return result == 1;
}

void View_setScene(
  self.Pointer<TView> tView,
  self.Pointer<TScene> tScene,
) {
  final result = _lib._View_setScene(tView.cast(), tScene.cast());
  return result;
}

void View_setFrontFaceWindingInverted(
  self.Pointer<TView> tView,
  bool inverted,
) {
  final result = _lib._View_setFrontFaceWindingInverted(tView.cast(), inverted);
  return result;
}

void View_setFogOptions(
  self.Pointer<TView> tView,
  TFogOptions tFogOptions,
) {
  final tFogOptionsPtr = tFogOptions._address;
  final result = _lib._View_setFogOptions(tView.cast(), tFogOptionsPtr.cast());
  return result;
}

void View_pick(
  self.Pointer<TView> tView,
  int requestId,
  int x,
  int y,
  DartPickCallback callback,
) {
  final result = _lib._View_pick(tView.cast(), requestId, x, y,
      callback as Pointer<self.NativeFunction<PickCallbackFunction>>);
  return result;
}

self.Pointer<TNameComponentManager> NameComponentManager_create() {
  final result = _lib._NameComponentManager_create();
  return self.Pointer<TNameComponentManager>(result);
}

self.Pointer<Char> NameComponentManager_getName(
  self.Pointer<TNameComponentManager> tNameComponentManager,
  DartEntityId entity,
) {
  final result =
      _lib._NameComponentManager_getName(tNameComponentManager.cast(), entity);
  return self.Pointer<Char>(result);
}

void IndirectLight_setRotation(
  self.Pointer<TIndirectLight> tIndirectLight,
  self.Pointer<Float64> rotation,
) {
  final result =
      _lib._IndirectLight_setRotation(tIndirectLight.cast(), rotation);
  return result;
}

self.Pointer<TTexture> Texture_build(
  self.Pointer<TEngine> engine,
  int width,
  int height,
  int depth,
  int levels,
  int tUsage,
  int import1,
  int sampler,
  int format,
) {
  final result = _lib._Texture_build(engine.cast(), width, height, depth,
      levels, tUsage, import1, sampler, format);
  return self.Pointer<TTexture>(result);
}

Dart__darwin_size_t Texture_getLevels(
  self.Pointer<TTexture> tTexture,
) {
  final result = _lib._Texture_getLevels(tTexture.cast());
  return result;
}

bool Texture_loadImage(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
  self.Pointer<TLinearImage> tImage,
  int bufferFormat,
  int pixelDataType,
  int level,
) {
  final result = _lib._Texture_loadImage(tEngine.cast(), tTexture.cast(),
      tImage.cast(), bufferFormat, pixelDataType, level);
  return result == 1;
}

bool Texture_setImage(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
  int level,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t size,
  int x_offset,
  int y_offset,
  int z_offset,
  int width,
  int height,
  int depth,
  int bufferFormat,
  int pixelDataType,
) {
  final result = _lib._Texture_setImage(
      tEngine.cast(),
      tTexture.cast(),
      level,
      data,
      size,
      x_offset,
      y_offset,
      z_offset,
      width,
      height,
      depth,
      bufferFormat,
      pixelDataType);
  return result == 1;
}

int Texture_getWidth(
  self.Pointer<TTexture> tTexture,
  int level,
) {
  final result = _lib._Texture_getWidth(tTexture.cast(), level);
  return result;
}

int Texture_getHeight(
  self.Pointer<TTexture> tTexture,
  int level,
) {
  final result = _lib._Texture_getHeight(tTexture.cast(), level);
  return result;
}

int Texture_getDepth(
  self.Pointer<TTexture> tTexture,
  int level,
) {
  final result = _lib._Texture_getDepth(tTexture.cast(), level);
  return result;
}

int Texture_getUsage(
  self.Pointer<TTexture> tTexture,
  int level,
) {
  final result = _lib._Texture_getUsage(tTexture.cast(), level);
  return result;
}

void Texture_generateMipMaps(
  self.Pointer<TTexture> tTexture,
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Texture_generateMipMaps(tTexture.cast(), tEngine.cast());
  return result;
}

self.Pointer<TKtx1Bundle> Ktx1Bundle_create(
  self.Pointer<Uint8> ktxData,
  Dart__darwin_size_t length,
) {
  final result = _lib._Ktx1Bundle_create(ktxData, length);
  return self.Pointer<TKtx1Bundle>(result);
}

void Ktx1Bundle_getSphericalHarmonics(
  self.Pointer<TKtx1Bundle> tBundle,
  self.Pointer<Float32> harmonics,
) {
  final result =
      _lib._Ktx1Bundle_getSphericalHarmonics(tBundle.cast(), harmonics);
  return result;
}

bool Ktx1Bundle_isCubemap(
  self.Pointer<TKtx1Bundle> tBundle,
) {
  final result = _lib._Ktx1Bundle_isCubemap(tBundle.cast());
  return result == 1;
}

void Ktx1Bundle_destroy(
  self.Pointer<TKtx1Bundle> tBundle,
) {
  final result = _lib._Ktx1Bundle_destroy(tBundle.cast());
  return result;
}

self.Pointer<TTexture> Ktx1Reader_createTexture(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TKtx1Bundle> tBundle,
  int requestId,
  DartVoidCallback onTextureUploadComplete,
) {
  final result = _lib._Ktx1Reader_createTexture(
      tEngine.cast(),
      tBundle.cast(),
      requestId,
      onTextureUploadComplete
          as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return self.Pointer<TTexture>(result);
}

self.Pointer<TLinearImage> Image_createEmpty(
  int width,
  int height,
  int channel,
) {
  final result = _lib._Image_createEmpty(width, height, channel);
  return self.Pointer<TLinearImage>(result);
}

self.Pointer<TLinearImage> Image_decode(
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
  self.Pointer<Char> name,
  bool alpha,
) {
  final result = _lib._Image_decode(data, length, name, alpha);
  return self.Pointer<TLinearImage>(result);
}

self.Pointer<Float32> Image_getBytes(
  self.Pointer<TLinearImage> tLinearImage,
) {
  final result = _lib._Image_getBytes(tLinearImage.cast());
  return self.Pointer<Float32>(result);
}

void Image_destroy(
  self.Pointer<TLinearImage> tLinearImage,
) {
  final result = _lib._Image_destroy(tLinearImage.cast());
  return result;
}

int Image_getWidth(
  self.Pointer<TLinearImage> tLinearImage,
) {
  final result = _lib._Image_getWidth(tLinearImage.cast());
  return result;
}

int Image_getHeight(
  self.Pointer<TLinearImage> tLinearImage,
) {
  final result = _lib._Image_getHeight(tLinearImage.cast());
  return result;
}

int Image_getChannels(
  self.Pointer<TLinearImage> tLinearImage,
) {
  final result = _lib._Image_getChannels(tLinearImage.cast());
  return result;
}

self.Pointer<TTexture> RenderTarget_getColorTexture(
  self.Pointer<TRenderTarget> tRenderTarget,
) {
  final result = _lib._RenderTarget_getColorTexture(tRenderTarget.cast());
  return self.Pointer<TTexture>(result);
}

self.Pointer<TTexture> RenderTarget_getDepthTexture(
  self.Pointer<TRenderTarget> tRenderTarget,
) {
  final result = _lib._RenderTarget_getDepthTexture(tRenderTarget.cast());
  return self.Pointer<TTexture>(result);
}

self.Pointer<TTextureSampler> TextureSampler_create() {
  final result = _lib._TextureSampler_create();
  return self.Pointer<TTextureSampler>(result);
}

self.Pointer<TTextureSampler> TextureSampler_createWithFiltering(
  int minFilter,
  int magFilter,
  int wrapS,
  int wrapT,
  int wrapR,
) {
  final result = _lib._TextureSampler_createWithFiltering(
      minFilter, magFilter, wrapS, wrapT, wrapR);
  return self.Pointer<TTextureSampler>(result);
}

self.Pointer<TTextureSampler> TextureSampler_createWithComparison(
  int compareMode,
  int compareFunc,
) {
  final result =
      _lib._TextureSampler_createWithComparison(compareMode, compareFunc);
  return self.Pointer<TTextureSampler>(result);
}

void TextureSampler_setMinFilter(
  self.Pointer<TTextureSampler> sampler,
  int filter,
) {
  final result = _lib._TextureSampler_setMinFilter(sampler.cast(), filter);
  return result;
}

void TextureSampler_setMagFilter(
  self.Pointer<TTextureSampler> sampler,
  int filter,
) {
  final result = _lib._TextureSampler_setMagFilter(sampler.cast(), filter);
  return result;
}

void TextureSampler_setWrapModeS(
  self.Pointer<TTextureSampler> sampler,
  int mode,
) {
  final result = _lib._TextureSampler_setWrapModeS(sampler.cast(), mode);
  return result;
}

void TextureSampler_setWrapModeT(
  self.Pointer<TTextureSampler> sampler,
  int mode,
) {
  final result = _lib._TextureSampler_setWrapModeT(sampler.cast(), mode);
  return result;
}

void TextureSampler_setWrapModeR(
  self.Pointer<TTextureSampler> sampler,
  int mode,
) {
  final result = _lib._TextureSampler_setWrapModeR(sampler.cast(), mode);
  return result;
}

void TextureSampler_setAnisotropy(
  self.Pointer<TTextureSampler> sampler,
  double anisotropy,
) {
  final result = _lib._TextureSampler_setAnisotropy(sampler.cast(), anisotropy);
  return result;
}

void TextureSampler_setCompareMode(
  self.Pointer<TTextureSampler> sampler,
  int mode,
  int func,
) {
  final result =
      _lib._TextureSampler_setCompareMode(sampler.cast(), mode, func);
  return result;
}

void TextureSampler_destroy(
  self.Pointer<TTextureSampler> sampler,
) {
  final result = _lib._TextureSampler_destroy(sampler.cast());
  return result;
}

void Gizmo_dummy(
  int t,
) {
  final result = _lib._Gizmo_dummy(t);
  return result;
}

self.Pointer<TGizmo> Gizmo_create(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> assetLoader,
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TNameComponentManager> tNameComponentManager,
  self.Pointer<TView> tView,
  self.Pointer<TMaterial> tMaterial,
  int tGizmoType,
) {
  final result = _lib._Gizmo_create(
      tEngine.cast(),
      assetLoader.cast(),
      tGltfResourceLoader.cast(),
      tNameComponentManager.cast(),
      tView.cast(),
      tMaterial.cast(),
      tGizmoType);
  return self.Pointer<TGizmo>(result);
}

void Gizmo_pick(
  self.Pointer<TGizmo> tGizmo,
  int x,
  int y,
  DartGizmoPickCallback callback,
) {
  final result = _lib._Gizmo_pick(tGizmo.cast(), x, y,
      callback as Pointer<self.NativeFunction<GizmoPickCallbackFunction>>);
  return result;
}

void Gizmo_highlight(
  self.Pointer<TGizmo> tGizmo,
  int axis,
) {
  final result = _lib._Gizmo_highlight(tGizmo.cast(), axis);
  return result;
}

void Gizmo_unhighlight(
  self.Pointer<TGizmo> tGizmo,
) {
  final result = _lib._Gizmo_unhighlight(tGizmo.cast());
  return result;
}

self.Pointer<TMaterialInstance> MaterialProvider_createMaterialInstance(
  self.Pointer<TMaterialProvider> provider,
  bool doubleSided,
  bool unlit,
  bool hasVertexColors,
  bool hasBaseColorTexture,
  bool hasNormalTexture,
  bool hasOcclusionTexture,
  bool hasEmissiveTexture,
  bool useSpecularGlossiness,
  int alphaMode,
  bool enableDiagnostics,
  bool hasMetallicRoughnessTexture,
  int metallicRoughnessUV,
  bool hasSpecularGlossinessTexture,
  int specularGlossinessUV,
  int baseColorUV,
  bool hasClearCoatTexture,
  int clearCoatUV,
  bool hasClearCoatRoughnessTexture,
  int clearCoatRoughnessUV,
  bool hasClearCoatNormalTexture,
  int clearCoatNormalUV,
  bool hasClearCoat,
  bool hasTransmission,
  bool hasTextureTransforms,
  int emissiveUV,
  int aoUV,
  int normalUV,
  bool hasTransmissionTexture,
  int transmissionUV,
  bool hasSheenColorTexture,
  int sheenColorUV,
  bool hasSheenRoughnessTexture,
  int sheenRoughnessUV,
  bool hasVolumeThicknessTexture,
  int volumeThicknessUV,
  bool hasSheen,
  bool hasIOR,
  bool hasVolume,
) {
  final result = _lib._MaterialProvider_createMaterialInstance(
      provider.cast(),
      doubleSided,
      unlit,
      hasVertexColors,
      hasBaseColorTexture,
      hasNormalTexture,
      hasOcclusionTexture,
      hasEmissiveTexture,
      useSpecularGlossiness,
      alphaMode,
      enableDiagnostics,
      hasMetallicRoughnessTexture,
      metallicRoughnessUV,
      hasSpecularGlossinessTexture,
      specularGlossinessUV,
      baseColorUV,
      hasClearCoatTexture,
      clearCoatUV,
      hasClearCoatRoughnessTexture,
      clearCoatRoughnessUV,
      hasClearCoatNormalTexture,
      clearCoatNormalUV,
      hasClearCoat,
      hasTransmission,
      hasTextureTransforms,
      emissiveUV,
      aoUV,
      normalUV,
      hasTransmissionTexture,
      transmissionUV,
      hasSheenColorTexture,
      sheenColorUV,
      hasSheenRoughnessTexture,
      sheenRoughnessUV,
      hasVolumeThicknessTexture,
      volumeThicknessUV,
      hasSheen,
      hasIOR,
      hasVolume);
  return self.Pointer<TMaterialInstance>(result);
}

self.Pointer<TRenderTarget> RenderTarget_create(
  self.Pointer<TEngine> tEngine,
  int width,
  int height,
  self.Pointer<TTexture> color,
  self.Pointer<TTexture> depth,
) {
  final result = _lib._RenderTarget_create(
      tEngine.cast(), width, height, color.cast(), depth.cast());
  return self.Pointer<TRenderTarget>(result);
}

void RenderTarget_destroy(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TRenderTarget> tRenderTarget,
) {
  final result =
      _lib._RenderTarget_destroy(tEngine.cast(), tRenderTarget.cast());
  return result;
}

void Scene_addEntity(
  self.Pointer<TScene> tScene,
  DartEntityId entityId,
) {
  final result = _lib._Scene_addEntity(tScene.cast(), entityId);
  return result;
}

void Scene_removeEntity(
  self.Pointer<TScene> tScene,
  DartEntityId entityId,
) {
  final result = _lib._Scene_removeEntity(tScene.cast(), entityId);
  return result;
}

void Scene_setSkybox(
  self.Pointer<TScene> tScene,
  self.Pointer<TSkybox> skybox,
) {
  final result = _lib._Scene_setSkybox(tScene.cast(), skybox.cast());
  return result;
}

void Scene_setIndirectLight(
  self.Pointer<TScene> tScene,
  self.Pointer<TIndirectLight> tIndirectLight,
) {
  final result =
      _lib._Scene_setIndirectLight(tScene.cast(), tIndirectLight.cast());
  return result;
}

void Scene_addFilamentAsset(
  self.Pointer<TScene> tScene,
  self.Pointer<TFilamentAsset> asset,
) {
  final result = _lib._Scene_addFilamentAsset(tScene.cast(), asset.cast());
  return result;
}

void Camera_setExposure(
  self.Pointer<TCamera> camera,
  double aperture,
  double shutterSpeed,
  double sensitivity,
) {
  final result = _lib._Camera_setExposure(
      camera.cast(), aperture, shutterSpeed, sensitivity);
  return result;
}

double4x4 Camera_getModelMatrix(
  self.Pointer<TCamera> camera,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result =
      _lib._Camera_getModelMatrix(double4x4_out.cast(), camera.cast());
  return double4x4_out.toDart();
}

double4x4 Camera_getViewMatrix(
  self.Pointer<TCamera> camera,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result =
      _lib._Camera_getViewMatrix(double4x4_out.cast(), camera.cast());
  return double4x4_out.toDart();
}

double4x4 Camera_getProjectionMatrix(
  self.Pointer<TCamera> camera,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result =
      _lib._Camera_getProjectionMatrix(double4x4_out.cast(), camera.cast());
  return double4x4_out.toDart();
}

double4x4 Camera_getCullingProjectionMatrix(
  self.Pointer<TCamera> camera,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result = _lib._Camera_getCullingProjectionMatrix(
      double4x4_out.cast(), camera.cast());
  return double4x4_out.toDart();
}

void Camera_getFrustum(
  self.Pointer<TCamera> camera,
  self.Pointer<Float64> out,
) {
  final result = _lib._Camera_getFrustum(camera.cast(), out);
  return result;
}

void Camera_setProjectionMatrix(
  self.Pointer<TCamera> camera,
  self.Pointer<Float64> matrix,
  double near,
  double far,
) {
  final result =
      _lib._Camera_setProjectionMatrix(camera.cast(), matrix, near, far);
  return result;
}

void Camera_setProjectionFromFov(
  self.Pointer<TCamera> camera,
  double fovInDegrees,
  double aspect,
  double near,
  double far,
  bool horizontal,
) {
  final result = _lib._Camera_setProjectionFromFov(
      camera.cast(), fovInDegrees, aspect, near, far, horizontal);
  return result;
}

double Camera_getFocalLength(
  self.Pointer<TCamera> camera,
) {
  final result = _lib._Camera_getFocalLength(camera.cast());
  return result;
}

void Camera_lookAt(
  self.Pointer<TCamera> camera,
  double3 eye,
  double3 focus,
  double3 up,
) {
  final eyePtr = eye._address;
  final focusPtr = focus._address;
  final upPtr = up._address;
  final result = _lib._Camera_lookAt(
      camera.cast(), eyePtr.cast(), focusPtr.cast(), upPtr.cast());
  return result;
}

double Camera_getNear(
  self.Pointer<TCamera> camera,
) {
  final result = _lib._Camera_getNear(camera.cast());
  return result;
}

double Camera_getCullingFar(
  self.Pointer<TCamera> camera,
) {
  final result = _lib._Camera_getCullingFar(camera.cast());
  return result;
}

double Camera_getFov(
  self.Pointer<TCamera> camera,
  bool horizontal,
) {
  final result = _lib._Camera_getFov(camera.cast(), horizontal);
  return result;
}

double Camera_getFocusDistance(
  self.Pointer<TCamera> camera,
) {
  final result = _lib._Camera_getFocusDistance(camera.cast());
  return result;
}

void Camera_setFocusDistance(
  self.Pointer<TCamera> camera,
  double focusDistance,
) {
  final result = _lib._Camera_setFocusDistance(camera.cast(), focusDistance);
  return result;
}

void Camera_setCustomProjectionWithCulling(
  self.Pointer<TCamera> camera,
  double4x4 projectionMatrix,
  double near,
  double far,
) {
  final projectionMatrixPtr = projectionMatrix._address;
  final result = _lib._Camera_setCustomProjectionWithCulling(
      camera.cast(), projectionMatrixPtr.cast(), near, far);
  return result;
}

void Camera_setModelMatrix(
  self.Pointer<TCamera> camera,
  self.Pointer<Float64> tModelMatrix,
) {
  final result = _lib._Camera_setModelMatrix(camera.cast(), tModelMatrix);
  return result;
}

void Camera_setLensProjection(
  self.Pointer<TCamera> camera,
  double near,
  double far,
  double aspect,
  double focalLength,
) {
  final result = _lib._Camera_setLensProjection(
      camera.cast(), near, far, aspect, focalLength);
  return result;
}

DartEntityId Camera_getEntity(
  self.Pointer<TCamera> camera,
) {
  final result = _lib._Camera_getEntity(camera.cast());
  return result;
}

void Camera_setProjection(
  self.Pointer<TCamera> tCamera,
  int projection,
  double left,
  double right,
  double bottom,
  double top,
  double near,
  double far,
) {
  final result = _lib._Camera_setProjection(
      tCamera.cast(), projection, left, right, bottom, top, near, far);
  return result;
}

double4x4 TransformManager_getLocalTransform(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId entityId,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result = _lib._TransformManager_getLocalTransform(
      double4x4_out.cast(), tTransformManager.cast(), entityId);
  return double4x4_out.toDart();
}

double4x4 TransformManager_getWorldTransform(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId entityId,
) {
  final double4x4_out = double4x4.stackAlloc();
  final result = _lib._TransformManager_getWorldTransform(
      double4x4_out.cast(), tTransformManager.cast(), entityId);
  return double4x4_out.toDart();
}

void TransformManager_setTransform(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId entityId,
  double4x4 transform,
) {
  final transformPtr = transform._address;
  final result = _lib._TransformManager_setTransform(
      tTransformManager.cast(), entityId, transformPtr.cast());
  return result;
}

bool TransformManager_transformToUnitCube(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId entityId,
  Aabb3 boundingBox,
) {
  final boundingBoxPtr = boundingBox._address;
  final result = _lib._TransformManager_transformToUnitCube(
      tTransformManager.cast(), entityId, boundingBoxPtr.cast());
  return result == 1;
}

void TransformManager_setParent(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId child,
  DartEntityId parent,
  bool preserveScaling,
) {
  final result = _lib._TransformManager_setParent(
      tTransformManager.cast(), child, parent, preserveScaling);
  return result;
}

DartEntityId TransformManager_getParent(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId child,
) {
  final result =
      _lib._TransformManager_getParent(tTransformManager.cast(), child);
  return result;
}

DartEntityId TransformManager_getAncestor(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId childEntityId,
) {
  final result = _lib._TransformManager_getAncestor(
      tTransformManager.cast(), childEntityId);
  return result;
}

void TransformManager_createComponent(
  self.Pointer<TTransformManager> tTransformManager,
  DartEntityId entity,
) {
  final result =
      _lib._TransformManager_createComponent(tTransformManager.cast(), entity);
  return result;
}

void Renderer_setClearOptions(
  self.Pointer<TRenderer> tRenderer,
  double clearR,
  double clearG,
  double clearB,
  double clearA,
  int clearStencil,
  bool clear,
  bool discard,
) {
  final result = _lib._Renderer_setClearOptions(tRenderer.cast(), clearR,
      clearG, clearB, clearA, clearStencil, clear, discard);
  return result;
}

bool Renderer_beginFrame(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TSwapChain> tSwapChain,
  BigInt frameTimeInNanos,
) {
  final result = _lib._Renderer_beginFrame(
      tRenderer.cast(), tSwapChain.cast(), frameTimeInNanos.toJSBigInt);
  return result == 1;
}

void Renderer_endFrame(
  self.Pointer<TRenderer> tRenderer,
) {
  final result = _lib._Renderer_endFrame(tRenderer.cast());
  return result;
}

void Renderer_render(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
) {
  final result = _lib._Renderer_render(tRenderer.cast(), tView.cast());
  return result;
}

void Renderer_renderStandaloneView(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
) {
  final result =
      _lib._Renderer_renderStandaloneView(tRenderer.cast(), tView.cast());
  return result;
}

void Renderer_readPixels(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
  self.Pointer<TRenderTarget> tRenderTarget,
  int tPixelBufferFormat,
  int tPixelDataType,
  self.Pointer<Uint8> out,
  Dart__darwin_size_t outLength,
) {
  final result = _lib._Renderer_readPixels(tRenderer.cast(), tView.cast(),
      tRenderTarget.cast(), tPixelBufferFormat, tPixelDataType, out, outLength);
  return result;
}

void Renderer_setFrameInterval(
  self.Pointer<TRenderer> tRenderer,
  double headRoomRatio,
  double scaleRate,
  int history,
  int interval,
) {
  final result = _lib._Renderer_setFrameInterval(
      tRenderer.cast(), headRoomRatio, scaleRate, history, interval);
  return result;
}

self.Pointer<TRenderTicker> RenderTicker_create(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TRenderer> tRenderer,
) {
  final result = _lib._RenderTicker_create(tEngine.cast(), tRenderer.cast());
  return self.Pointer<TRenderTicker>(result);
}

void RenderTicker_destroy(
  self.Pointer<TRenderTicker> tRenderTicker,
) {
  final result = _lib._RenderTicker_destroy(tRenderTicker.cast());
  return result;
}

void RenderTicker_addAnimationManager(
  self.Pointer<TRenderTicker> tRenderTicker,
  self.Pointer<TAnimationManager> tAnimationManager,
) {
  final result = _lib._RenderTicker_addAnimationManager(
      tRenderTicker.cast(), tAnimationManager.cast());
  return result;
}

void RenderTicker_removeAnimationManager(
  self.Pointer<TRenderTicker> tRenderTicker,
  self.Pointer<TAnimationManager> tAnimationManager,
) {
  final result = _lib._RenderTicker_removeAnimationManager(
      tRenderTicker.cast(), tAnimationManager.cast());
  return result;
}

void RenderTicker_render(
  self.Pointer<TRenderTicker> tRenderTicker,
  BigInt frameTimeInNanos,
) {
  final result = _lib._RenderTicker_render(
      tRenderTicker.cast(), frameTimeInNanos.toJSBigInt);
  return result;
}

void RenderTicker_setRenderable(
  self.Pointer<TRenderTicker> tRenderTicker,
  self.Pointer<TSwapChain> swapChain,
  self.Pointer<self.PointerClass<TView>> views,
  int numViews,
) {
  final result = _lib._RenderTicker_setRenderable(
      tRenderTicker.cast(), swapChain.cast(), views.cast(), numViews);
  return result;
}

self.Pointer<TEngine> Engine_create(
  int backend,
  self.Pointer<Void> platform,
  self.Pointer<Void> sharedContext,
  int stereoscopicEyeCount,
  bool disableHandleUseAfterFreeCheck,
) {
  final result = _lib._Engine_create(backend, platform, sharedContext,
      stereoscopicEyeCount, disableHandleUseAfterFreeCheck);
  return self.Pointer<TEngine>(result);
}

void Engine_destroy(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_destroy(tEngine.cast());
  return result;
}

self.Pointer<TRenderer> Engine_createRenderer(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_createRenderer(tEngine.cast());
  return self.Pointer<TRenderer>(result);
}

self.Pointer<TSwapChain> Engine_createSwapChain(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Void> window,
  BigInt flags,
) {
  final result =
      _lib._Engine_createSwapChain(tEngine.cast(), window, flags.toJSBigInt);
  return self.Pointer<TSwapChain>(result);
}

self.Pointer<TSwapChain> Engine_createHeadlessSwapChain(
  self.Pointer<TEngine> tEngine,
  int width,
  int height,
  BigInt flags,
) {
  final result = _lib._Engine_createHeadlessSwapChain(
      tEngine.cast(), width, height, flags.toJSBigInt);
  return self.Pointer<TSwapChain>(result);
}

void Engine_destroySwapChain(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TSwapChain> tSwapChain,
) {
  final result =
      _lib._Engine_destroySwapChain(tEngine.cast(), tSwapChain.cast());
  return result;
}

void Engine_destroyView(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TView> tView,
) {
  final result = _lib._Engine_destroyView(tEngine.cast(), tView.cast());
  return result;
}

void Engine_destroyScene(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TScene> tScene,
) {
  final result = _lib._Engine_destroyScene(tEngine.cast(), tScene.cast());
  return result;
}

void Engine_destroyColorGrading(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TColorGrading> tColorGrading,
) {
  final result =
      _lib._Engine_destroyColorGrading(tEngine.cast(), tColorGrading.cast());
  return result;
}

self.Pointer<TCamera> Engine_createCamera(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_createCamera(tEngine.cast());
  return self.Pointer<TCamera>(result);
}

void Engine_destroyCamera(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TCamera> tCamera,
) {
  final result = _lib._Engine_destroyCamera(tEngine.cast(), tCamera.cast());
  return result;
}

self.Pointer<TView> Engine_createView(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_createView(tEngine.cast());
  return self.Pointer<TView>(result);
}

self.Pointer<TCamera> Engine_getCameraComponent(
  self.Pointer<TEngine> tEngine,
  DartEntityId entityId,
) {
  final result = _lib._Engine_getCameraComponent(tEngine.cast(), entityId);
  return self.Pointer<TCamera>(result);
}

self.Pointer<TTransformManager> Engine_getTransformManager(
  self.Pointer<TEngine> engine,
) {
  final result = _lib._Engine_getTransformManager(engine.cast());
  return self.Pointer<TTransformManager>(result);
}

self.Pointer<TRenderableManager> Engine_getRenderableManager(
  self.Pointer<TEngine> engine,
) {
  final result = _lib._Engine_getRenderableManager(engine.cast());
  return self.Pointer<TRenderableManager>(result);
}

self.Pointer<TLightManager> Engine_getLightManager(
  self.Pointer<TEngine> engine,
) {
  final result = _lib._Engine_getLightManager(engine.cast());
  return self.Pointer<TLightManager>(result);
}

self.Pointer<TEntityManager> Engine_getEntityManager(
  self.Pointer<TEngine> engine,
) {
  final result = _lib._Engine_getEntityManager(engine.cast());
  return self.Pointer<TEntityManager>(result);
}

void Engine_destroyTexture(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
) {
  final result = _lib._Engine_destroyTexture(tEngine.cast(), tTexture.cast());
  return result;
}

self.Pointer<TFence> Engine_createFence(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_createFence(tEngine.cast());
  return self.Pointer<TFence>(result);
}

void Engine_destroyFence(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TFence> tFence,
) {
  final result = _lib._Engine_destroyFence(tEngine.cast(), tFence.cast());
  return result;
}

void Engine_flushAndWait(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_flushAndWait(tEngine.cast());
  return result;
}

void Engine_execute(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_execute(tEngine.cast());
  return result;
}

self.Pointer<TMaterial> Engine_buildMaterial(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Uint8> materialData,
  Dart__darwin_size_t length,
) {
  final result =
      _lib._Engine_buildMaterial(tEngine.cast(), materialData, length);
  return self.Pointer<TMaterial>(result);
}

void Engine_destroyMaterial(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterial> tMaterial,
) {
  final result = _lib._Engine_destroyMaterial(tEngine.cast(), tMaterial.cast());
  return result;
}

void Engine_destroyMaterialInstance(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterialInstance> tMaterialInstance,
) {
  final result = _lib._Engine_destroyMaterialInstance(
      tEngine.cast(), tMaterialInstance.cast());
  return result;
}

self.Pointer<TScene> Engine_createScene(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._Engine_createScene(tEngine.cast());
  return self.Pointer<TScene>(result);
}

self.Pointer<TSkybox> Engine_buildSkybox(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
) {
  final result = _lib._Engine_buildSkybox(tEngine.cast(), tTexture.cast());
  return self.Pointer<TSkybox>(result);
}

self.Pointer<TIndirectLight> Engine_buildIndirectLightFromIrradianceTexture(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tReflectionsTexture,
  self.Pointer<TTexture> tIrradianceTexture,
  double intensity,
) {
  final result = _lib._Engine_buildIndirectLightFromIrradianceTexture(
      tEngine.cast(),
      tReflectionsTexture.cast(),
      tIrradianceTexture.cast(),
      intensity);
  return self.Pointer<TIndirectLight>(result);
}

self.Pointer<TIndirectLight> Engine_buildIndirectLightFromIrradianceHarmonics(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tReflectionsTexture,
  self.Pointer<Float32> irradianceHarmonics,
  double intensity,
) {
  final result = _lib._Engine_buildIndirectLightFromIrradianceHarmonics(
      tEngine.cast(),
      tReflectionsTexture.cast(),
      irradianceHarmonics,
      intensity);
  return self.Pointer<TIndirectLight>(result);
}

void Engine_destroySkybox(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TSkybox> tSkybox,
) {
  final result = _lib._Engine_destroySkybox(tEngine.cast(), tSkybox.cast());
  return result;
}

void Engine_destroyIndirectLight(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TIndirectLight> tIndirectLight,
) {
  final result =
      _lib._Engine_destroyIndirectLight(tEngine.cast(), tIndirectLight.cast());
  return result;
}

DartEntityId EntityManager_createEntity(
  self.Pointer<TEntityManager> tEntityManager,
) {
  final result = _lib._EntityManager_createEntity(tEntityManager.cast());
  return result;
}

void Fence_waitAndDestroy(
  self.Pointer<TFence> tFence,
) {
  final result = _lib._Fence_waitAndDestroy(tFence.cast());
  return result;
}

void RenderThread_create() {
  final result = _lib._RenderThread_create();
  return result;
}

void RenderThread_destroy() {
  final result = _lib._RenderThread_destroy();
  return result;
}

void RenderThread_requestFrameAsync() {
  final result = _lib._RenderThread_requestFrameAsync();
  return result;
}

void RenderThread_setRenderTicker(
  self.Pointer<TRenderTicker> tRenderTicker,
) {
  final result = _lib._RenderThread_setRenderTicker(tRenderTicker.cast());
  return result;
}

void RenderThread_addTask(
  self.Pointer<self.NativeFunction<void Function()>> task,
) {
  final result = _lib._RenderThread_addTask(task.cast());
  return result;
}

void RenderTicker_renderRenderThread(
  self.Pointer<TRenderTicker> tRenderTicker,
  BigInt frameTimeInNanos,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._RenderTicker_renderRenderThread(
      tRenderTicker.cast(),
      frameTimeInNanos.toJSBigInt,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void AnimationManager_createRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TScene> tScene,
  self.Pointer<self.NativeFunction<void Function(Pointer<TAnimationManager>)>>
      onComplete,
) {
  final result = _lib._AnimationManager_createRenderThread(
      tEngine.cast(), tScene.cast(), onComplete.cast());
  return result;
}

void Engine_createRenderThread(
  int backend,
  self.Pointer<Void> platform,
  self.Pointer<Void> sharedContext,
  int stereoscopicEyeCount,
  bool disableHandleUseAfterFreeCheck,
  self.Pointer<self.NativeFunction<void Function(Pointer<TEngine>)>> onComplete,
) {
  final result = _lib._Engine_createRenderThread(
      backend,
      platform,
      sharedContext,
      stereoscopicEyeCount,
      disableHandleUseAfterFreeCheck,
      onComplete.cast());
  return result;
}

void Engine_createRendererRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TRenderer>)>>
      onComplete,
) {
  final result = _lib._Engine_createRendererRenderThread(
      tEngine.cast(), onComplete.cast());
  return result;
}

void Engine_createSwapChainRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Void> window,
  BigInt flags,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSwapChain>)>>
      onComplete,
) {
  final result = _lib._Engine_createSwapChainRenderThread(
      tEngine.cast(), window, flags.toJSBigInt, onComplete.cast());
  return result;
}

void Engine_createHeadlessSwapChainRenderThread(
  self.Pointer<TEngine> tEngine,
  int width,
  int height,
  BigInt flags,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSwapChain>)>>
      onComplete,
) {
  final result = _lib._Engine_createHeadlessSwapChainRenderThread(
      tEngine.cast(), width, height, flags.toJSBigInt, onComplete.cast());
  return result;
}

void Engine_createCameraRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TCamera>)>> onComplete,
) {
  final result =
      _lib._Engine_createCameraRenderThread(tEngine.cast(), onComplete.cast());
  return result;
}

void Engine_createViewRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TView>)>> onComplete,
) {
  final result =
      _lib._Engine_createViewRenderThread(tEngine.cast(), onComplete.cast());
  return result;
}

void Engine_buildMaterialRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Uint8> materialData,
  Dart__darwin_size_t length,
  self.Pointer<self.NativeFunction<void Function(Pointer<TMaterial>)>>
      onComplete,
) {
  final result = _lib._Engine_buildMaterialRenderThread(
      tEngine.cast(), materialData, length, onComplete.cast());
  return result;
}

void Engine_destroyRenderThread(
  self.Pointer<TEngine> tEngine,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyRenderThread(tEngine.cast(), requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroySwapChainRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TSwapChain> tSwapChain,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroySwapChainRenderThread(
      tEngine.cast(),
      tSwapChain.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyViewRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TView> tView,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyViewRenderThread(
      tEngine.cast(),
      tView.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroySceneRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TScene> tScene,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroySceneRenderThread(
      tEngine.cast(),
      tScene.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyColorGradingRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TColorGrading> tColorGrading,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyColorGradingRenderThread(
      tEngine.cast(),
      tColorGrading.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyMaterialRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterial> tMaterial,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyMaterialRenderThread(
      tEngine.cast(),
      tMaterial.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyMaterialInstanceRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterialInstance> tMaterialInstance,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyMaterialInstanceRenderThread(
      tEngine.cast(),
      tMaterialInstance.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroySkyboxRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TSkybox> tSkybox,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroySkyboxRenderThread(
      tEngine.cast(),
      tSkybox.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyIndirectLightRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TIndirectLight> tIndirectLight,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyIndirectLightRenderThread(
      tEngine.cast(),
      tIndirectLight.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Texture_buildRenderThread(
  self.Pointer<TEngine> engine,
  int width,
  int height,
  int depth,
  int levels,
  int tUsage,
  int import1,
  int sampler,
  int format,
  self.Pointer<self.NativeFunction<void Function(Pointer<TTexture>)>>
      onComplete,
) {
  final result = _lib._Texture_buildRenderThread(engine.cast(), width, height,
      depth, levels, tUsage, import1, sampler, format, onComplete.cast());
  return result;
}

void Texture_generateMipMapsRenderThread(
  self.Pointer<TTexture> tTexture,
  self.Pointer<TEngine> tEngine,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Texture_generateMipMapsRenderThread(
      tTexture.cast(),
      tEngine.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Ktx1Reader_createTextureRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TKtx1Bundle> tBundle,
  int requestId,
  DartVoidCallback onTextureUploadComplete,
  self.Pointer<self.NativeFunction<void Function(Pointer<TTexture>)>>
      onComplete,
) {
  final result = _lib._Ktx1Reader_createTextureRenderThread(
      tEngine.cast(),
      tBundle.cast(),
      requestId,
      onTextureUploadComplete
          as Pointer<self.NativeFunction<VoidCallbackFunction>>,
      onComplete.cast());
  return result;
}

void Engine_destroyTextureRenderThread(
  self.Pointer<TEngine> engine,
  self.Pointer<TTexture> tTexture,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyTextureRenderThread(
      engine.cast(),
      tTexture.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_createFenceRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TFence>)>> onComplete,
) {
  final result =
      _lib._Engine_createFenceRenderThread(tEngine.cast(), onComplete.cast());
  return result;
}

void Fence_waitAndDestroyRenderThread(
  self.Pointer<TFence> tFence,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Fence_waitAndDestroyRenderThread(
      tFence.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_destroyFenceRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TFence> tFence,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_destroyFenceRenderThread(
      tEngine.cast(),
      tFence.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_flushAndWaitRenderThread(
  self.Pointer<TEngine> tEngine,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_flushAndWaitRenderThread(
      tEngine.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_executeRenderThread(
  self.Pointer<TEngine> tEngine,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Engine_executeRenderThread(tEngine.cast(), requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Engine_buildSkyboxRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSkybox>)>> onComplete,
) {
  final result = _lib._Engine_buildSkyboxRenderThread(
      tEngine.cast(), tTexture.cast(), onComplete.cast());
  return result;
}

void Engine_buildIndirectLightFromIrradianceTextureRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tReflectionsTexture,
  self.Pointer<TTexture> tIrradianceTexture,
  double intensity,
  self.Pointer<self.NativeFunction<void Function(Pointer<TIndirectLight>)>>
      onComplete,
) {
  final result =
      _lib._Engine_buildIndirectLightFromIrradianceTextureRenderThread(
          tEngine.cast(),
          tReflectionsTexture.cast(),
          tIrradianceTexture.cast(),
          intensity,
          onComplete.cast());
  return result;
}

void Engine_buildIndirectLightFromIrradianceHarmonicsRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tReflectionsTexture,
  self.Pointer<Float32> harmonics,
  double intensity,
  self.Pointer<self.NativeFunction<void Function(Pointer<TIndirectLight>)>>
      onComplete,
) {
  final result =
      _lib._Engine_buildIndirectLightFromIrradianceHarmonicsRenderThread(
          tEngine.cast(),
          tReflectionsTexture.cast(),
          harmonics,
          intensity,
          onComplete.cast());
  return result;
}

void Renderer_setClearOptionsRenderThread(
  self.Pointer<TRenderer> tRenderer,
  double clearR,
  double clearG,
  double clearB,
  double clearA,
  int clearStencil,
  bool clear,
  bool discard,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Renderer_setClearOptionsRenderThread(
      tRenderer.cast(),
      clearR,
      clearG,
      clearB,
      clearA,
      clearStencil,
      clear,
      discard,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Renderer_beginFrameRenderThread(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TSwapChain> tSwapChain,
  BigInt frameTimeInNanos,
  self.Pointer<self.NativeFunction<void Function(bool)>> onComplete,
) {
  final result = _lib._Renderer_beginFrameRenderThread(tRenderer.cast(),
      tSwapChain.cast(), frameTimeInNanos.toJSBigInt, onComplete.cast());
  return result;
}

void Renderer_endFrameRenderThread(
  self.Pointer<TRenderer> tRenderer,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Renderer_endFrameRenderThread(
      tRenderer.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Renderer_renderRenderThread(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Renderer_renderRenderThread(
      tRenderer.cast(),
      tView.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Renderer_renderStandaloneViewRenderThread(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Renderer_renderStandaloneViewRenderThread(
      tRenderer.cast(),
      tView.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Renderer_readPixelsRenderThread(
  self.Pointer<TRenderer> tRenderer,
  self.Pointer<TView> tView,
  self.Pointer<TRenderTarget> tRenderTarget,
  int tPixelBufferFormat,
  int tPixelDataType,
  self.Pointer<Uint8> out,
  Dart__darwin_size_t outLength,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Renderer_readPixelsRenderThread(
      tRenderer.cast(),
      tView.cast(),
      tRenderTarget.cast(),
      tPixelBufferFormat,
      tPixelDataType,
      out,
      outLength,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Material_createInstanceRenderThread(
  self.Pointer<TMaterial> tMaterial,
  self.Pointer<self.NativeFunction<void Function(Pointer<TMaterialInstance>)>>
      onComplete,
) {
  final result = _lib._Material_createInstanceRenderThread(
      tMaterial.cast(), onComplete.cast());
  return result;
}

void Material_createImageMaterialRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TMaterial>)>>
      onComplete,
) {
  final result = _lib._Material_createImageMaterialRenderThread(
      tEngine.cast(), onComplete.cast());
  return result;
}

void Material_createGizmoMaterialRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TMaterial>)>>
      onComplete,
) {
  final result = _lib._Material_createGizmoMaterialRenderThread(
      tEngine.cast(), onComplete.cast());
  return result;
}

void ColorGrading_createRenderThread(
  self.Pointer<TEngine> tEngine,
  int toneMapping,
  self.Pointer<self.NativeFunction<void Function(Pointer<TColorGrading>)>>
      callback,
) {
  final result = _lib._ColorGrading_createRenderThread(
      tEngine.cast(), toneMapping, callback.cast());
  return result;
}

void View_pickRenderThread(
  self.Pointer<TView> tView,
  int requestId,
  int x,
  int y,
  DartPickCallback callback,
) {
  final result = _lib._View_pickRenderThread(tView.cast(), requestId, x, y,
      callback as Pointer<self.NativeFunction<PickCallbackFunction>>);
  return result;
}

void View_setColorGradingRenderThread(
  self.Pointer<TView> tView,
  self.Pointer<TColorGrading> tColorGrading,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._View_setColorGradingRenderThread(
      tView.cast(),
      tColorGrading.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void View_setBloomRenderThread(
  self.Pointer<TView> tView,
  bool enabled,
  double strength,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._View_setBloomRenderThread(
      tView.cast(),
      enabled,
      strength,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void View_setCameraRenderThread(
  self.Pointer<TView> tView,
  self.Pointer<TCamera> tCamera,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._View_setCameraRenderThread(
      tView.cast(),
      tCamera.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void SceneAsset_destroyRenderThread(
  self.Pointer<TSceneAsset> tSceneAsset,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._SceneAsset_destroyRenderThread(
      tSceneAsset.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void SceneAsset_createFromFilamentAssetRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> tAssetLoader,
  self.Pointer<TNameComponentManager> tNameComponentManager,
  self.Pointer<TFilamentAsset> tFilamentAsset,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSceneAsset>)>>
      onComplete,
) {
  final result = _lib._SceneAsset_createFromFilamentAssetRenderThread(
      tEngine.cast(),
      tAssetLoader.cast(),
      tNameComponentManager.cast(),
      tFilamentAsset.cast(),
      onComplete.cast());
  return result;
}

void SceneAsset_createInstanceRenderThread(
  self.Pointer<TSceneAsset> asset,
  self.Pointer<self.PointerClass<TMaterialInstance>> tMaterialInstances,
  int materialInstanceCount,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSceneAsset>)>>
      callback,
) {
  final result = _lib._SceneAsset_createInstanceRenderThread(asset.cast(),
      tMaterialInstances.cast(), materialInstanceCount, callback.cast());
  return result;
}

void SceneAsset_createGeometryRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Float32> vertices,
  int numVertices,
  self.Pointer<Float32> normals,
  int numNormals,
  self.Pointer<Float32> uvs,
  int numUvs,
  self.Pointer<Uint16> indices,
  int numIndices,
  int tPrimitiveType,
  self.Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
  int materialInstanceCount,
  self.Pointer<self.NativeFunction<void Function(Pointer<TSceneAsset>)>>
      callback,
) {
  final result = _lib._SceneAsset_createGeometryRenderThread(
      tEngine.cast(),
      vertices,
      numVertices,
      normals,
      numNormals,
      uvs,
      numUvs,
      indices,
      numIndices,
      tPrimitiveType,
      materialInstances.cast(),
      materialInstanceCount,
      callback.cast());
  return result;
}

void MaterialProvider_createMaterialInstanceRenderThread(
  self.Pointer<TMaterialProvider> tMaterialProvider,
  bool doubleSided,
  bool unlit,
  bool hasVertexColors,
  bool hasBaseColorTexture,
  bool hasNormalTexture,
  bool hasOcclusionTexture,
  bool hasEmissiveTexture,
  bool useSpecularGlossiness,
  int alphaMode,
  bool enableDiagnostics,
  bool hasMetallicRoughnessTexture,
  int metallicRoughnessUV,
  bool hasSpecularGlossinessTexture,
  int specularGlossinessUV,
  int baseColorUV,
  bool hasClearCoatTexture,
  int clearCoatUV,
  bool hasClearCoatRoughnessTexture,
  int clearCoatRoughnessUV,
  bool hasClearCoatNormalTexture,
  int clearCoatNormalUV,
  bool hasClearCoat,
  bool hasTransmission,
  bool hasTextureTransforms,
  int emissiveUV,
  int aoUV,
  int normalUV,
  bool hasTransmissionTexture,
  int transmissionUV,
  bool hasSheenColorTexture,
  int sheenColorUV,
  bool hasSheenRoughnessTexture,
  int sheenRoughnessUV,
  bool hasVolumeThicknessTexture,
  int volumeThicknessUV,
  bool hasSheen,
  bool hasIOR,
  bool hasVolume,
  self.Pointer<self.NativeFunction<void Function(Pointer<TMaterialInstance>)>>
      callback,
) {
  final result = _lib._MaterialProvider_createMaterialInstanceRenderThread(
      tMaterialProvider.cast(),
      doubleSided,
      unlit,
      hasVertexColors,
      hasBaseColorTexture,
      hasNormalTexture,
      hasOcclusionTexture,
      hasEmissiveTexture,
      useSpecularGlossiness,
      alphaMode,
      enableDiagnostics,
      hasMetallicRoughnessTexture,
      metallicRoughnessUV,
      hasSpecularGlossinessTexture,
      specularGlossinessUV,
      baseColorUV,
      hasClearCoatTexture,
      clearCoatUV,
      hasClearCoatRoughnessTexture,
      clearCoatRoughnessUV,
      hasClearCoatNormalTexture,
      clearCoatNormalUV,
      hasClearCoat,
      hasTransmission,
      hasTextureTransforms,
      emissiveUV,
      aoUV,
      normalUV,
      hasTransmissionTexture,
      transmissionUV,
      hasSheenColorTexture,
      sheenColorUV,
      hasSheenRoughnessTexture,
      sheenRoughnessUV,
      hasVolumeThicknessTexture,
      volumeThicknessUV,
      hasSheen,
      hasIOR,
      hasVolume,
      callback.cast());
  return result;
}

void AnimationManager_updateBoneMatricesRenderThread(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  self.Pointer<self.NativeFunction<void Function(bool)>> callback,
) {
  final result = _lib._AnimationManager_updateBoneMatricesRenderThread(
      tAnimationManager.cast(), sceneAsset.cast(), callback.cast());
  return result;
}

void AnimationManager_setMorphTargetWeightsRenderThread(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
  self.Pointer<Float32> morphData,
  int numWeights,
  self.Pointer<self.NativeFunction<void Function(bool)>> callback,
) {
  final result = _lib._AnimationManager_setMorphTargetWeightsRenderThread(
      tAnimationManager.cast(),
      entityId,
      morphData,
      numWeights,
      callback.cast());
  return result;
}

void Image_createEmptyRenderThread(
  int width,
  int height,
  int channel,
  self.Pointer<self.NativeFunction<void Function(Pointer<TLinearImage>)>>
      onComplete,
) {
  final result = _lib._Image_createEmptyRenderThread(
      width, height, channel, onComplete.cast());
  return result;
}

void Image_decodeRenderThread(
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
  self.Pointer<Char> name,
  bool alpha,
  self.Pointer<self.NativeFunction<void Function(Pointer<TLinearImage>)>>
      onComplete,
) {
  final result = _lib._Image_decodeRenderThread(
      data, length, name, alpha, onComplete.cast());
  return result;
}

void Image_getBytesRenderThread(
  self.Pointer<TLinearImage> tLinearImage,
  self.Pointer<self.NativeFunction<void Function(Pointer<Float32>)>> onComplete,
) {
  final result =
      _lib._Image_getBytesRenderThread(tLinearImage.cast(), onComplete.cast());
  return result;
}

void Image_destroyRenderThread(
  self.Pointer<TLinearImage> tLinearImage,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Image_destroyRenderThread(tLinearImage.cast(), requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Image_getWidthRenderThread(
  self.Pointer<TLinearImage> tLinearImage,
  self.Pointer<self.NativeFunction<void Function(int)>> onComplete,
) {
  final result =
      _lib._Image_getWidthRenderThread(tLinearImage.cast(), onComplete.cast());
  return result;
}

void Image_getHeightRenderThread(
  self.Pointer<TLinearImage> tLinearImage,
  self.Pointer<self.NativeFunction<void Function(int)>> onComplete,
) {
  final result =
      _lib._Image_getHeightRenderThread(tLinearImage.cast(), onComplete.cast());
  return result;
}

void Image_getChannelsRenderThread(
  self.Pointer<TLinearImage> tLinearImage,
  self.Pointer<self.NativeFunction<void Function(int)>> onComplete,
) {
  final result = _lib._Image_getChannelsRenderThread(
      tLinearImage.cast(), onComplete.cast());
  return result;
}

void Texture_loadImageRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
  self.Pointer<TLinearImage> tImage,
  int bufferFormat,
  int pixelDataType,
  int level,
  self.Pointer<self.NativeFunction<void Function(bool)>> onComplete,
) {
  final result = _lib._Texture_loadImageRenderThread(
      tEngine.cast(),
      tTexture.cast(),
      tImage.cast(),
      bufferFormat,
      pixelDataType,
      level,
      onComplete.cast());
  return result;
}

void Texture_setImageRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TTexture> tTexture,
  int level,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t size,
  int x_offset,
  int y_offset,
  int z_offset,
  int width,
  int height,
  int depth,
  int bufferFormat,
  int pixelDataType,
  self.Pointer<self.NativeFunction<void Function(bool)>> onComplete,
) {
  final result = _lib._Texture_setImageRenderThread(
      tEngine.cast(),
      tTexture.cast(),
      level,
      data,
      size,
      x_offset,
      y_offset,
      z_offset,
      width,
      height,
      depth,
      bufferFormat,
      pixelDataType,
      onComplete.cast());
  return result;
}

void RenderTarget_getColorTextureRenderThread(
  self.Pointer<TRenderTarget> tRenderTarget,
  self.Pointer<self.NativeFunction<void Function(Pointer<TTexture>)>>
      onComplete,
) {
  final result = _lib._RenderTarget_getColorTextureRenderThread(
      tRenderTarget.cast(), onComplete.cast());
  return result;
}

void RenderTarget_createRenderThread(
  self.Pointer<TEngine> tEngine,
  int width,
  int height,
  self.Pointer<TTexture> color,
  self.Pointer<TTexture> depth,
  self.Pointer<self.NativeFunction<void Function(Pointer<TRenderTarget>)>>
      onComplete,
) {
  final result = _lib._RenderTarget_createRenderThread(tEngine.cast(), width,
      height, color.cast(), depth.cast(), onComplete.cast());
  return result;
}

void RenderTarget_destroyRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TRenderTarget> tRenderTarget,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._RenderTarget_destroyRenderThread(
      tEngine.cast(),
      tRenderTarget.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_createRenderThread(
  self.Pointer<self.NativeFunction<void Function(Pointer<TTextureSampler>)>>
      onComplete,
) {
  final result = _lib._TextureSampler_createRenderThread(onComplete.cast());
  return result;
}

void TextureSampler_createWithFilteringRenderThread(
  int minFilter,
  int magFilter,
  int wrapS,
  int wrapT,
  int wrapR,
  self.Pointer<self.NativeFunction<void Function(Pointer<TTextureSampler>)>>
      onComplete,
) {
  final result = _lib._TextureSampler_createWithFilteringRenderThread(
      minFilter, magFilter, wrapS, wrapT, wrapR, onComplete.cast());
  return result;
}

void TextureSampler_createWithComparisonRenderThread(
  int compareMode,
  int compareFunc,
  self.Pointer<self.NativeFunction<void Function(Pointer<TTextureSampler>)>>
      onComplete,
) {
  final result = _lib._TextureSampler_createWithComparisonRenderThread(
      compareMode, compareFunc, onComplete.cast());
  return result;
}

void TextureSampler_setMinFilterRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int filter,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setMinFilterRenderThread(
      sampler.cast(),
      filter,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setMagFilterRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int filter,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setMagFilterRenderThread(
      sampler.cast(),
      filter,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setWrapModeSRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int mode,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setWrapModeSRenderThread(
      sampler.cast(),
      mode,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setWrapModeTRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int mode,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setWrapModeTRenderThread(
      sampler.cast(),
      mode,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setWrapModeRRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int mode,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setWrapModeRRenderThread(
      sampler.cast(),
      mode,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setAnisotropyRenderThread(
  self.Pointer<TTextureSampler> sampler,
  double anisotropy,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setAnisotropyRenderThread(
      sampler.cast(),
      anisotropy,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_setCompareModeRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int mode,
  int func,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_setCompareModeRenderThread(
      sampler.cast(),
      mode,
      func,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void TextureSampler_destroyRenderThread(
  self.Pointer<TTextureSampler> sampler,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._TextureSampler_destroyRenderThread(
      sampler.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void AnimationManager_setBoneTransformRenderThread(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId asset,
  int skinIndex,
  int boneIndex,
  self.Pointer<Float32> transform,
  self.Pointer<self.NativeFunction<void Function(bool)>> callback,
) {
  final result = _lib._AnimationManager_setBoneTransformRenderThread(
      tAnimationManager.cast(),
      asset,
      skinIndex,
      boneIndex,
      transform,
      callback.cast());
  return result;
}

void AnimationManager_resetToRestPoseRenderThread(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._AnimationManager_resetToRestPoseRenderThread(
      tAnimationManager.cast(),
      tSceneAsset.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void GltfAssetLoader_createRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterialProvider> tMaterialProvider,
  self.Pointer<TNameComponentManager> tNameComponentManager,
  self.Pointer<self.NativeFunction<void Function(Pointer<TGltfAssetLoader>)>>
      callback,
) {
  final result = _lib._GltfAssetLoader_createRenderThread(tEngine.cast(),
      tMaterialProvider.cast(), tNameComponentManager.cast(), callback.cast());
  return result;
}

void GltfResourceLoader_createRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<self.NativeFunction<void Function(Pointer<TGltfResourceLoader>)>>
      callback,
) {
  final result = _lib._GltfResourceLoader_createRenderThread(
      tEngine.cast(), callback.cast());
  return result;
}

void GltfResourceLoader_destroyRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfResourceLoader> tResourceLoader,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._GltfResourceLoader_destroyRenderThread(
      tEngine.cast(),
      tResourceLoader.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void GltfResourceLoader_loadResourcesRenderThread(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TFilamentAsset> tFilamentAsset,
  self.Pointer<self.NativeFunction<void Function(bool)>> callback,
) {
  final result = _lib._GltfResourceLoader_loadResourcesRenderThread(
      tGltfResourceLoader.cast(), tFilamentAsset.cast(), callback.cast());
  return result;
}

void GltfResourceLoader_addResourceDataRenderThread(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<Char> uri,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._GltfResourceLoader_addResourceDataRenderThread(
      tGltfResourceLoader.cast(),
      uri,
      data,
      length,
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void GltfResourceLoader_asyncBeginLoadRenderThread(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TFilamentAsset> tFilamentAsset,
  self.Pointer<self.NativeFunction<void Function(bool)>> callback,
) {
  final result = _lib._GltfResourceLoader_asyncBeginLoadRenderThread(
      tGltfResourceLoader.cast(), tFilamentAsset.cast(), callback.cast());
  return result;
}

void GltfResourceLoader_asyncUpdateLoadRenderThread(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
) {
  final result = _lib._GltfResourceLoader_asyncUpdateLoadRenderThread(
      tGltfResourceLoader.cast());
  return result;
}

void GltfResourceLoader_asyncGetLoadProgressRenderThread(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<self.NativeFunction<void Function(double)>> callback,
) {
  final result = _lib._GltfResourceLoader_asyncGetLoadProgressRenderThread(
      tGltfResourceLoader.cast(), callback.cast());
  return result;
}

void GltfAssetLoader_loadRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> tAssetLoader,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
  int numInstances,
  self.Pointer<self.NativeFunction<void Function(Pointer<TFilamentAsset>)>>
      callback,
) {
  final result = _lib._GltfAssetLoader_loadRenderThread(tEngine.cast(),
      tAssetLoader.cast(), data, length, numInstances, callback.cast());
  return result;
}

void Scene_addFilamentAssetRenderThread(
  self.Pointer<TScene> tScene,
  self.Pointer<TFilamentAsset> tAsset,
  int requestId,
  DartVoidCallback onComplete,
) {
  final result = _lib._Scene_addFilamentAssetRenderThread(
      tScene.cast(),
      tAsset.cast(),
      requestId,
      onComplete as Pointer<self.NativeFunction<VoidCallbackFunction>>);
  return result;
}

void Gizmo_createRenderThread(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> tAssetLoader,
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TNameComponentManager> tNameComponentManager,
  self.Pointer<TView> tView,
  self.Pointer<TMaterial> tMaterial,
  int tGizmoType,
  self.Pointer<self.NativeFunction<void Function(Pointer<TGizmo>)>> callback,
) {
  final result = _lib._Gizmo_createRenderThread(
      tEngine.cast(),
      tAssetLoader.cast(),
      tGltfResourceLoader.cast(),
      tNameComponentManager.cast(),
      tView.cast(),
      tMaterial.cast(),
      tGizmoType,
      callback.cast());
  return result;
}

self.Pointer<TGltfResourceLoader> GltfResourceLoader_create(
  self.Pointer<TEngine> tEngine,
) {
  final result = _lib._GltfResourceLoader_create(tEngine.cast());
  return self.Pointer<TGltfResourceLoader>(result);
}

void GltfResourceLoader_destroy(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
) {
  final result = _lib._GltfResourceLoader_destroy(
      tEngine.cast(), tGltfResourceLoader.cast());
  return result;
}

bool GltfResourceLoader_asyncBeginLoad(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TFilamentAsset> tFilamentAsset,
) {
  final result = _lib._GltfResourceLoader_asyncBeginLoad(
      tGltfResourceLoader.cast(), tFilamentAsset.cast());
  return result == 1;
}

void GltfResourceLoader_asyncUpdateLoad(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
) {
  final result =
      _lib._GltfResourceLoader_asyncUpdateLoad(tGltfResourceLoader.cast());
  return result;
}

double GltfResourceLoader_asyncGetLoadProgress(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
) {
  final result =
      _lib._GltfResourceLoader_asyncGetLoadProgress(tGltfResourceLoader.cast());
  return result;
}

void GltfResourceLoader_addResourceData(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<Char> uri,
  self.Pointer<Uint8> data,
  Dart__darwin_size_t length,
) {
  final result = _lib._GltfResourceLoader_addResourceData(
      tGltfResourceLoader.cast(), uri, data, length);
  return result;
}

bool GltfResourceLoader_loadResources(
  self.Pointer<TGltfResourceLoader> tGltfResourceLoader,
  self.Pointer<TFilamentAsset> tFilamentAsset,
) {
  final result = _lib._GltfResourceLoader_loadResources(
      tGltfResourceLoader.cast(), tFilamentAsset.cast());
  return result == 1;
}

bool RenderableManager_setMaterialInstanceAt(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  int primitiveIndex,
  self.Pointer<TMaterialInstance> tMaterialInstance,
) {
  final result = _lib._RenderableManager_setMaterialInstanceAt(
      tRenderableManager.cast(),
      entityId,
      primitiveIndex,
      tMaterialInstance.cast());
  return result == 1;
}

self.Pointer<TMaterialInstance> RenderableManager_getMaterialInstanceAt(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  int primitiveIndex,
) {
  final result = _lib._RenderableManager_getMaterialInstanceAt(
      tRenderableManager.cast(), entityId, primitiveIndex);
  return self.Pointer<TMaterialInstance>(result);
}

Dart__darwin_size_t RenderableManager_getPrimitiveCount(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result = _lib._RenderableManager_getPrimitiveCount(
      tRenderableManager.cast(), entityId);
  return result;
}

bool RenderableManager_isRenderable(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result =
      _lib._RenderableManager_isRenderable(tRenderableManager.cast(), entityId);
  return result == 1;
}

bool RenderableManager_hasComponent(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result =
      _lib._RenderableManager_hasComponent(tRenderableManager.cast(), entityId);
  return result == 1;
}

bool RenderableManager_empty(
  self.Pointer<TRenderableManager> tRenderableManager,
) {
  final result = _lib._RenderableManager_empty(tRenderableManager.cast());
  return result == 1;
}

bool RenderableManager_getLightChannel(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  int channel,
) {
  final result = _lib._RenderableManager_getLightChannel(
      tRenderableManager.cast(), entityId, channel);
  return result == 1;
}

bool RenderableManager_isShadowCaster(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result = _lib._RenderableManager_isShadowCaster(
      tRenderableManager.cast(), entityId);
  return result == 1;
}

void RenderableManager_setCastShadows(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  bool castShadows,
) {
  final result = _lib._RenderableManager_setCastShadows(
      tRenderableManager.cast(), entityId, castShadows);
  return result;
}

void RenderableManager_setReceiveShadows(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  bool receiveShadows,
) {
  final result = _lib._RenderableManager_setReceiveShadows(
      tRenderableManager.cast(), entityId, receiveShadows);
  return result;
}

bool RenderableManager_isShadowReceiver(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result = _lib._RenderableManager_isShadowReceiver(
      tRenderableManager.cast(), entityId);
  return result == 1;
}

bool RenderableManager_getFogEnabled(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final result = _lib._RenderableManager_getFogEnabled(
      tRenderableManager.cast(), entityId);
  return result == 1;
}

Aabb3 RenderableManager_getAabb(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final Aabb3_out = Aabb3.stackAlloc();
  final result = _lib._RenderableManager_getAabb(
      Aabb3_out.cast(), tRenderableManager.cast(), entityId);
  return Aabb3_out.toDart();
}

void RenderableManager_setVisibilityLayer(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  int layer,
) {
  final result = _lib._RenderableManager_setVisibilityLayer(
      tRenderableManager.cast(), entityId, layer);
  return result;
}

void RenderableManager_setPriority(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
  int priority,
) {
  final result = _lib._RenderableManager_setPriority(
      tRenderableManager.cast(), entityId, priority);
  return result;
}

Aabb3 RenderableManager_getBoundingBox(
  self.Pointer<TRenderableManager> tRenderableManager,
  DartEntityId entityId,
) {
  final Aabb3_out = Aabb3.stackAlloc();
  final result = _lib._RenderableManager_getBoundingBox(
      Aabb3_out.cast(), tRenderableManager.cast(), entityId);
  return Aabb3_out.toDart();
}

self.Pointer<TSceneAsset> SceneAsset_createGeometry(
  self.Pointer<TEngine> tEngine,
  self.Pointer<Float32> vertices,
  int numVertices,
  self.Pointer<Float32> normals,
  int numNormals,
  self.Pointer<Float32> uvs,
  int numUvs,
  self.Pointer<Uint16> indices,
  int numIndices,
  int tPrimitiveType,
  self.Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
  int materialInstanceCount,
) {
  final result = _lib._SceneAsset_createGeometry(
      tEngine.cast(),
      vertices,
      numVertices,
      normals,
      numNormals,
      uvs,
      numUvs,
      indices,
      numIndices,
      tPrimitiveType,
      materialInstances.cast(),
      materialInstanceCount);
  return self.Pointer<TSceneAsset>(result);
}

self.Pointer<TSceneAsset> SceneAsset_createFromFilamentAsset(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TGltfAssetLoader> tAssetLoader,
  self.Pointer<TNameComponentManager> tNameComponentManager,
  self.Pointer<TFilamentAsset> tFilamentAsset,
) {
  final result = _lib._SceneAsset_createFromFilamentAsset(tEngine.cast(),
      tAssetLoader.cast(), tNameComponentManager.cast(), tFilamentAsset.cast());
  return self.Pointer<TSceneAsset>(result);
}

self.Pointer<TFilamentAsset> SceneAsset_getFilamentAsset(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getFilamentAsset(tSceneAsset.cast());
  return self.Pointer<TFilamentAsset>(result);
}

self.Pointer<TSceneAsset> SceneAsset_createGrid(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TMaterial> tMaterial,
) {
  final result = _lib._SceneAsset_createGrid(tEngine.cast(), tMaterial.cast());
  return self.Pointer<TSceneAsset>(result);
}

void SceneAsset_destroy(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_destroy(tSceneAsset.cast());
  return result;
}

void SceneAsset_addToScene(
  self.Pointer<TSceneAsset> tSceneAsset,
  self.Pointer<TScene> tScene,
) {
  final result = _lib._SceneAsset_addToScene(tSceneAsset.cast(), tScene.cast());
  return result;
}

void SceneAsset_removeFromScene(
  self.Pointer<TSceneAsset> tSceneAsset,
  self.Pointer<TScene> tScene,
) {
  final result =
      _lib._SceneAsset_removeFromScene(tSceneAsset.cast(), tScene.cast());
  return result;
}

DartEntityId SceneAsset_getEntity(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getEntity(tSceneAsset.cast());
  return result;
}

int SceneAsset_getChildEntityCount(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getChildEntityCount(tSceneAsset.cast());
  return result;
}

void SceneAsset_getChildEntities(
  self.Pointer<TSceneAsset> tSceneAsset,
  self.Pointer<Int32> out,
) {
  final result = _lib._SceneAsset_getChildEntities(tSceneAsset.cast(), out);
  return result;
}

self.Pointer<Int32> SceneAsset_getCameraEntities(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getCameraEntities(tSceneAsset.cast());
  return self.Pointer<Int32>(result);
}

Dart__darwin_size_t SceneAsset_getCameraEntityCount(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getCameraEntityCount(tSceneAsset.cast());
  return result;
}

self.Pointer<Int32> SceneAsset_getLightEntities(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getLightEntities(tSceneAsset.cast());
  return self.Pointer<Int32>(result);
}

Dart__darwin_size_t SceneAsset_getLightEntityCount(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getLightEntityCount(tSceneAsset.cast());
  return result;
}

self.Pointer<TSceneAsset> SceneAsset_getInstance(
  self.Pointer<TSceneAsset> tSceneAsset,
  int index,
) {
  final result = _lib._SceneAsset_getInstance(tSceneAsset.cast(), index);
  return self.Pointer<TSceneAsset>(result);
}

Dart__darwin_size_t SceneAsset_getInstanceCount(
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._SceneAsset_getInstanceCount(tSceneAsset.cast());
  return result;
}

self.Pointer<TSceneAsset> SceneAsset_createInstance(
  self.Pointer<TSceneAsset> asset,
  self.Pointer<self.PointerClass<TMaterialInstance>> materialInstances,
  int materialInstanceCount,
) {
  final result = _lib._SceneAsset_createInstance(
      asset.cast(), materialInstances.cast(), materialInstanceCount);
  return self.Pointer<TSceneAsset>(result);
}

Aabb3 SceneAsset_getBoundingBox(
  self.Pointer<TSceneAsset> asset,
) {
  final Aabb3_out = Aabb3.stackAlloc();
  final result =
      _lib._SceneAsset_getBoundingBox(Aabb3_out.cast(), asset.cast());
  return Aabb3_out.toDart();
}

self.Pointer<TAnimationManager> AnimationManager_create(
  self.Pointer<TEngine> tEngine,
  self.Pointer<TScene> tScene,
) {
  final result = _lib._AnimationManager_create(tEngine.cast(), tScene.cast());
  return self.Pointer<TAnimationManager>(result);
}

void AnimationManager_update(
  self.Pointer<TAnimationManager> tAnimationManager,
  BigInt frameTimeInNanos,
) {
  final result = _lib._AnimationManager_update(
      tAnimationManager.cast(), frameTimeInNanos.toJSBigInt);
  return result;
}

bool AnimationManager_addGltfAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._AnimationManager_addGltfAnimationComponent(
      tAnimationManager.cast(), tSceneAsset.cast());
  return result == 1;
}

bool AnimationManager_removeGltfAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._AnimationManager_removeGltfAnimationComponent(
      tAnimationManager.cast(), tSceneAsset.cast());
  return result == 1;
}

void AnimationManager_addMorphAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
) {
  final result = _lib._AnimationManager_addMorphAnimationComponent(
      tAnimationManager.cast(), entityId);
  return result;
}

void AnimationManager_removeMorphAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
) {
  final result = _lib._AnimationManager_removeMorphAnimationComponent(
      tAnimationManager.cast(), entityId);
  return result;
}

bool AnimationManager_addBoneAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._AnimationManager_addBoneAnimationComponent(
      tAnimationManager.cast(), tSceneAsset.cast());
  return result == 1;
}

bool AnimationManager_removeBoneAnimationComponent(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
) {
  final result = _lib._AnimationManager_removeBoneAnimationComponent(
      tAnimationManager.cast(), tSceneAsset.cast());
  return result == 1;
}

bool AnimationManager_setMorphAnimation(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
  self.Pointer<Float32> morphData,
  self.Pointer<Uint32> morphIndices,
  int numMorphTargets,
  int numFrames,
  double frameLengthInMs,
) {
  final result = _lib._AnimationManager_setMorphAnimation(
      tAnimationManager.cast(),
      entityId,
      morphData,
      morphIndices,
      numMorphTargets,
      numFrames,
      frameLengthInMs);
  return result == 1;
}

bool AnimationManager_clearMorphAnimation(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
) {
  final result = _lib._AnimationManager_clearMorphAnimation(
      tAnimationManager.cast(), entityId);
  return result == 1;
}

void AnimationManager_resetToRestPose(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
) {
  final result = _lib._AnimationManager_resetToRestPose(
      tAnimationManager.cast(), sceneAsset.cast());
  return result;
}

bool AnimationManager_addBoneAnimation(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
  int skinIndex,
  int boneIndex,
  self.Pointer<Float32> frameData,
  int numFrames,
  double frameLengthInMs,
  double fadeOutInSecs,
  double fadeInInSecs,
  double maxDelta,
) {
  final result = _lib._AnimationManager_addBoneAnimation(
      tAnimationManager.cast(),
      tSceneAsset.cast(),
      skinIndex,
      boneIndex,
      frameData,
      numFrames,
      frameLengthInMs,
      fadeOutInSecs,
      fadeInInSecs,
      maxDelta);
  return result == 1;
}

DartEntityId AnimationManager_getBone(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int skinIndex,
  int boneIndex,
) {
  final result = _lib._AnimationManager_getBone(
      tAnimationManager.cast(), sceneAsset.cast(), skinIndex, boneIndex);
  return result;
}

void AnimationManager_getRestLocalTransforms(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int skinIndex,
  self.Pointer<Float32> out,
  int numBones,
) {
  final result = _lib._AnimationManager_getRestLocalTransforms(
      tAnimationManager.cast(), sceneAsset.cast(), skinIndex, out, numBones);
  return result;
}

void AnimationManager_getInverseBindMatrix(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int skinIndex,
  int boneIndex,
  self.Pointer<Float32> out,
) {
  final result = _lib._AnimationManager_getInverseBindMatrix(
      tAnimationManager.cast(), sceneAsset.cast(), skinIndex, boneIndex, out);
  return result;
}

bool AnimationManager_playGltfAnimation(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
  int index,
  bool loop,
  bool reverse,
  bool replaceActive,
  double crossfade,
  double startOffset,
) {
  final result = _lib._AnimationManager_playGltfAnimation(
      tAnimationManager.cast(),
      tSceneAsset.cast(),
      index,
      loop,
      reverse,
      replaceActive,
      crossfade,
      startOffset);
  return result == 1;
}

bool AnimationManager_stopGltfAnimation(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int index,
) {
  final result = _lib._AnimationManager_stopGltfAnimation(
      tAnimationManager.cast(), sceneAsset.cast(), index);
  return result == 1;
}

double AnimationManager_getGltfAnimationDuration(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int animationIndex,
) {
  final result = _lib._AnimationManager_getGltfAnimationDuration(
      tAnimationManager.cast(), sceneAsset.cast(), animationIndex);
  return result;
}

int AnimationManager_getGltfAnimationCount(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
) {
  final result = _lib._AnimationManager_getGltfAnimationCount(
      tAnimationManager.cast(), sceneAsset.cast());
  return result;
}

void AnimationManager_getGltfAnimationName(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  self.Pointer<Char> outPtr,
  int index,
) {
  final result = _lib._AnimationManager_getGltfAnimationName(
      tAnimationManager.cast(), sceneAsset.cast(), outPtr, index);
  return result;
}

int AnimationManager_getBoneCount(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  int skinIndex,
) {
  final result = _lib._AnimationManager_getBoneCount(
      tAnimationManager.cast(), sceneAsset.cast(), skinIndex);
  return result;
}

void AnimationManager_getBoneNames(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  self.Pointer<self.PointerClass<Char>> out,
  int skinIndex,
) {
  final result = _lib._AnimationManager_getBoneNames(
      tAnimationManager.cast(), sceneAsset.cast(), out, skinIndex);
  return result;
}

int AnimationManager_getMorphTargetNameCount(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  DartEntityId childEntity,
) {
  final result = _lib._AnimationManager_getMorphTargetNameCount(
      tAnimationManager.cast(), sceneAsset.cast(), childEntity);
  return result;
}

void AnimationManager_getMorphTargetName(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
  DartEntityId childEntity,
  self.Pointer<Char> outPtr,
  int index,
) {
  final result = _lib._AnimationManager_getMorphTargetName(
      tAnimationManager.cast(), sceneAsset.cast(), childEntity, outPtr, index);
  return result;
}

bool AnimationManager_updateBoneMatrices(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> sceneAsset,
) {
  final result = _lib._AnimationManager_updateBoneMatrices(
      tAnimationManager.cast(), sceneAsset.cast());
  return result == 1;
}

bool AnimationManager_setMorphTargetWeights(
  self.Pointer<TAnimationManager> tAnimationManager,
  DartEntityId entityId,
  self.Pointer<Float32> morphData,
  int numWeights,
) {
  final result = _lib._AnimationManager_setMorphTargetWeights(
      tAnimationManager.cast(), entityId, morphData, numWeights);
  return result == 1;
}

bool AnimationManager_setGltfAnimationFrame(
  self.Pointer<TAnimationManager> tAnimationManager,
  self.Pointer<TSceneAsset> tSceneAsset,
  int animationIndex,
  int frame,
) {
  final result = _lib._AnimationManager_setGltfAnimationFrame(
      tAnimationManager.cast(), tSceneAsset.cast(), animationIndex, frame);
  return result == 1;
}

extension TMaterialInstanceExt on Pointer<TMaterialInstance> {
  TMaterialInstance toDart() {
    return TMaterialInstance(this);
  }
}

final class TMaterialInstance extends self.Struct {
  TMaterialInstance(super._address);

  static Pointer<TMaterialInstance> stackAlloc() {
    return Pointer<TMaterialInstance>(_lib._stackAlloc<TMaterialInstance>(0));
  }
}

extension TMaterialExt on Pointer<TMaterial> {
  TMaterial toDart() {
    return TMaterial(this);
  }
}

final class TMaterial extends self.Struct {
  TMaterial(super._address);

  static Pointer<TMaterial> stackAlloc() {
    return Pointer<TMaterial>(_lib._stackAlloc<TMaterial>(0));
  }
}

extension TEngineExt on Pointer<TEngine> {
  TEngine toDart() {
    return TEngine(this);
  }
}

final class TEngine extends self.Struct {
  TEngine(super._address);

  static Pointer<TEngine> stackAlloc() {
    return Pointer<TEngine>(_lib._stackAlloc<TEngine>(0));
  }
}

sealed class TCullingMode {
  static const CULLING_MODE_NONE = 0;
  static const CULLING_MODE_FRONT = 1;
  static const CULLING_MODE_BACK = 2;
  static const CULLING_MODE_FRONT_AND_BACK = 3;
}

extension TTextureExt on Pointer<TTexture> {
  TTexture toDart() {
    return TTexture(this);
  }
}

final class TTexture extends self.Struct {
  TTexture(super._address);

  static Pointer<TTexture> stackAlloc() {
    return Pointer<TTexture>(_lib._stackAlloc<TTexture>(0));
  }
}

extension TTextureSamplerExt on Pointer<TTextureSampler> {
  TTextureSampler toDart() {
    return TTextureSampler(this);
  }
}

final class TTextureSampler extends self.Struct {
  TTextureSampler(super._address);

  static Pointer<TTextureSampler> stackAlloc() {
    return Pointer<TTextureSampler>(_lib._stackAlloc<TTextureSampler>(0));
  }
}

sealed class TSamplerCompareFunc {
  /// !< Less or equal
  static const LE = 0;

  /// !< Greater or equal
  static const GE = 1;

  /// !< Strictly less than
  static const L = 2;

  /// !< Strictly greater than
  static const G = 3;

  /// !< Equal
  static const E = 4;

  /// !< Not equal
  static const NE = 5;

  /// !< Always. Depth / stencil testing is deactivated.
  static const A = 6;

  /// !< Never. The depth / stencil test always fails.
  static const N = 7;
}

sealed class TStencilOperation {
  static const KEEP = 0;
  static const ZERO = 1;
  static const REPLACE = 2;
  static const INCR = 3;
  static const INCR_WRAP = 4;
  static const DECR = 5;
  static const DECR_WRAP = 6;
  static const INVERT = 7;
}

sealed class TStencilFace {
  static const STENCIL_FACE_FRONT = 1;
  static const STENCIL_FACE_BACK = 2;
  static const STENCIL_FACE_FRONT_AND_BACK = 3;
}

sealed class TTransparencyMode {
  /// ! the transparent object is drawn honoring the raster state
  static const DEFAULT = 0;

  /// the transparent object is first drawn in the depth buffer,
  /// then in the color buffer, honoring the culling mode, but ignoring the depth test function
  static const TWO_PASSES_ONE_SIDE = 1;

  /// the transparent object is drawn twice in the color buffer,
  /// first with back faces only, then with front faces; the culling
  /// mode is ignored. Can be combined with two-sided lighting
  static const TWO_PASSES_TWO_SIDES = 2;
}

extension TLightManagerExt on Pointer<TLightManager> {
  TLightManager toDart() {
    return TLightManager(this);
  }
}

final class TLightManager extends self.Struct {
  TLightManager(super._address);

  static Pointer<TLightManager> stackAlloc() {
    return Pointer<TLightManager>(_lib._stackAlloc<TLightManager>(0));
  }
}

typedef EntityId = int;
typedef DartEntityId = int;

sealed class TLightType {
  static const LIGHT_TYPE_SUN = 0;
  static const LIGHT_TYPE_DIRECTIONAL = 1;
  static const LIGHT_TYPE_POINT = 2;
  static const LIGHT_TYPE_FOCUSED_SPOT = 3;
  static const LIGHT_TYPE_SPOT = 4;
}

extension TFilamentAssetExt on Pointer<TFilamentAsset> {
  TFilamentAsset toDart() {
    return TFilamentAsset(this);
  }
}

final class TFilamentAsset extends self.Struct {
  TFilamentAsset(super._address);

  static Pointer<TFilamentAsset> stackAlloc() {
    return Pointer<TFilamentAsset>(_lib._stackAlloc<TFilamentAsset>(0));
  }
}

extension TGltfAssetLoaderExt on Pointer<TGltfAssetLoader> {
  TGltfAssetLoader toDart() {
    return TGltfAssetLoader(this);
  }
}

final class TGltfAssetLoader extends self.Struct {
  TGltfAssetLoader(super._address);

  static Pointer<TGltfAssetLoader> stackAlloc() {
    return Pointer<TGltfAssetLoader>(_lib._stackAlloc<TGltfAssetLoader>(0));
  }
}

extension TMaterialProviderExt on Pointer<TMaterialProvider> {
  TMaterialProvider toDart() {
    return TMaterialProvider(this);
  }
}

final class TMaterialProvider extends self.Struct {
  TMaterialProvider(super._address);

  static Pointer<TMaterialProvider> stackAlloc() {
    return Pointer<TMaterialProvider>(_lib._stackAlloc<TMaterialProvider>(0));
  }
}

extension TNameComponentManagerExt on Pointer<TNameComponentManager> {
  TNameComponentManager toDart() {
    return TNameComponentManager(this);
  }
}

final class TNameComponentManager extends self.Struct {
  TNameComponentManager(super._address);

  static Pointer<TNameComponentManager> stackAlloc() {
    return Pointer<TNameComponentManager>(
        _lib._stackAlloc<TNameComponentManager>(0));
  }
}

typedef size_t = __darwin_size_t;
typedef __darwin_size_t = int;
typedef Dart__darwin_size_t = int;

extension TRenderableManagerExt on Pointer<TRenderableManager> {
  TRenderableManager toDart() {
    return TRenderableManager(this);
  }
}

final class TRenderableManager extends self.Struct {
  TRenderableManager(super._address);

  static Pointer<TRenderableManager> stackAlloc() {
    return Pointer<TRenderableManager>(_lib._stackAlloc<TRenderableManager>(0));
  }
}

extension TViewportExt on Pointer<TViewport> {
  TViewport toDart() {
    return TViewport(this);
  }
}

final class TViewport extends self.Struct {
  int get left {
    final value = _lib.getValue(this._address + 0, 'i32').toDartInt;
    return value;
  }

  set left(int val) {
    _lib.setValue(this._address + 0, val.toJS, 'i32');
  }

  int get bottom {
    final value = _lib.getValue(this._address + 4, 'i32').toDartInt;
    return value;
  }

  set bottom(int val) {
    _lib.setValue(this._address + 4, val.toJS, 'i32');
  }

  int get width {
    final value = _lib.getValue(this._address + 8, 'i32').toDartInt;
    return value;
  }

  set width(int val) {
    _lib.setValue(this._address + 8, val.toJS, 'i32');
  }

  int get height {
    final value = _lib.getValue(this._address + 12, 'i32').toDartInt;
    return value;
  }

  set height(int val) {
    _lib.setValue(this._address + 12, val.toJS, 'i32');
  }

  TViewport(super._address);

  static Pointer<TViewport> stackAlloc() {
    return Pointer<TViewport>(_lib._stackAlloc<TViewport>(16));
  }
}

extension TViewExt on Pointer<TView> {
  TView toDart() {
    return TView(this);
  }
}

final class TView extends self.Struct {
  TView(super._address);

  static Pointer<TView> stackAlloc() {
    return Pointer<TView>(_lib._stackAlloc<TView>(0));
  }
}

extension TColorGradingExt on Pointer<TColorGrading> {
  TColorGrading toDart() {
    return TColorGrading(this);
  }
}

final class TColorGrading extends self.Struct {
  TColorGrading(super._address);

  static Pointer<TColorGrading> stackAlloc() {
    return Pointer<TColorGrading>(_lib._stackAlloc<TColorGrading>(0));
  }
}

sealed class TToneMapping {
  static const ACES = 0;
  static const FILMIC = 1;
  static const LINEAR = 2;
}

sealed class TBlendMode {
  static const OPAQUE = 0;
  static const TRANSLUCENT = 1;
}

extension TRenderTargetExt on Pointer<TRenderTarget> {
  TRenderTarget toDart() {
    return TRenderTarget(this);
  }
}

final class TRenderTarget extends self.Struct {
  TRenderTarget(super._address);

  static Pointer<TRenderTarget> stackAlloc() {
    return Pointer<TRenderTarget>(_lib._stackAlloc<TRenderTarget>(0));
  }
}

sealed class TQualityLevel {
  static const LOW = 0;
  static const MEDIUM = 1;
  static const HIGH = 2;
  static const ULTRA = 3;
}

extension TCameraExt on Pointer<TCamera> {
  TCamera toDart() {
    return TCamera(this);
  }
}

final class TCamera extends self.Struct {
  TCamera(super._address);

  static Pointer<TCamera> stackAlloc() {
    return Pointer<TCamera>(_lib._stackAlloc<TCamera>(0));
  }
}

extension TSceneExt on Pointer<TScene> {
  TScene toDart() {
    return TScene(this);
  }
}

final class TScene extends self.Struct {
  TScene(super._address);

  static Pointer<TScene> stackAlloc() {
    return Pointer<TScene>(_lib._stackAlloc<TScene>(0));
  }
}

/// Copied from FogOptions in View.h

extension TFogOptionsExt on Pointer<TFogOptions> {
  TFogOptions toDart() {
    return TFogOptions(this);
  }
}

final class TFogOptions extends self.Struct {
  double get distance {
    final value = _lib.getValue(this._address + 0, 'float').toDartDouble;
    return value;
  }

  set distance(double val) {
    _lib.setValue(this._address + 0, val.toJS, 'float');
  }

  double get cutOffDistance {
    final value = _lib.getValue(this._address + 4, 'float').toDartDouble;
    return value;
  }

  set cutOffDistance(double val) {
    _lib.setValue(this._address + 4, val.toJS, 'float');
  }

  double get maximumOpacity {
    final value = _lib.getValue(this._address + 8, 'float').toDartDouble;
    return value;
  }

  set maximumOpacity(double val) {
    _lib.setValue(this._address + 8, val.toJS, 'float');
  }

  double get height {
    final value = _lib.getValue(this._address + 12, 'float').toDartDouble;
    return value;
  }

  set height(double val) {
    _lib.setValue(this._address + 12, val.toJS, 'float');
  }

  double get heightFalloff {
    final value = _lib.getValue(this._address + 16, 'float').toDartDouble;
    return value;
  }

  set heightFalloff(double val) {
    _lib.setValue(this._address + 16, val.toJS, 'float');
  }

  double get density {
    final value = _lib.getValue(this._address + 20, 'float').toDartDouble;
    return value;
  }

  set density(double val) {
    _lib.setValue(this._address + 20, val.toJS, 'float');
  }

  double get inScatteringStart {
    final value = _lib.getValue(this._address + 24, 'float').toDartDouble;
    return value;
  }

  set inScatteringStart(double val) {
    _lib.setValue(this._address + 24, val.toJS, 'float');
  }

  double get inScatteringSize {
    final value = _lib.getValue(this._address + 28, 'float').toDartDouble;
    return value;
  }

  set inScatteringSize(double val) {
    _lib.setValue(this._address + 28, val.toJS, 'float');
  }

  self.Pointer<TTexture> get skyColor {
    final value = _lib.getValue(this._address + 32, '*');
    return self.Pointer<TTexture>(value.toDartInt);
  }

  set skyColor(self.Pointer<TTexture> val) {
    _lib.setValue(this._address + 32, val.toJS, '*');
  }

  double get linearColorR {
    final value = _lib.getValue(this._address + 36, 'float').toDartDouble;
    return value;
  }

  set linearColorR(double val) {
    _lib.setValue(this._address + 36, val.toJS, 'float');
  }

  double get linearColorG {
    final value = _lib.getValue(this._address + 40, 'float').toDartDouble;
    return value;
  }

  set linearColorG(double val) {
    _lib.setValue(this._address + 40, val.toJS, 'float');
  }

  double get linearColorB {
    final value = _lib.getValue(this._address + 44, 'float').toDartDouble;
    return value;
  }

  set linearColorB(double val) {
    _lib.setValue(this._address + 44, val.toJS, 'float');
  }

  bool get fogColorFromIbl {
    final value = _lib.getValue(this._address + 48, 'i8');
    return value.toDartInt == 1;
  }

  set fogColorFromIbl(bool val) {
    _lib.setValue(this._address + 48, (val ? 1 : 0).toJS, 'i8');
  }

  bool get enabled {
    final value = _lib.getValue(this._address + 49, 'i8');
    return value.toDartInt == 1;
  }

  set enabled(bool val) {
    _lib.setValue(this._address + 49, (val ? 1 : 0).toJS, 'i8');
  }

  TFogOptions(super._address);

  static Pointer<TFogOptions> stackAlloc() {
    return Pointer<TFogOptions>(_lib._stackAlloc<TFogOptions>(50));
  }
}

typedef PickCallback = Pointer<self.NativeFunction<PickCallbackFunction>>;
typedef DartPickCallback
    = self.Pointer<self.NativeFunction<PickCallbackFunction>>;
typedef PickCallbackFunction = void Function(int requestId, EntityId entityId,
    double depth, double fragX, double fragY, double fragZ);
typedef DartPickCallbackFunction = void Function(
    int requestId,
    DartEntityId entityId,
    double depth,
    double fragX,
    double fragY,
    double fragZ);

extension TIndirectLightExt on Pointer<TIndirectLight> {
  TIndirectLight toDart() {
    return TIndirectLight(this);
  }
}

final class TIndirectLight extends self.Struct {
  TIndirectLight(super._address);

  static Pointer<TIndirectLight> stackAlloc() {
    return Pointer<TIndirectLight>(_lib._stackAlloc<TIndirectLight>(0));
  }
}

sealed class TTextureSamplerType {
  static const SAMPLER_2D = 0;
  static const SAMPLER_2D_ARRAY = 1;
  static const SAMPLER_CUBEMAP = 2;
  static const SAMPLER_EXTERNAL = 3;
  static const SAMPLER_3D = 4;
  static const SAMPLER_CUBEMAP_ARRAY = 5;
}

sealed class TTextureFormat {
  static const TEXTUREFORMAT_R8 = 0;
  static const TEXTUREFORMAT_R8_SNORM = 1;
  static const TEXTUREFORMAT_R8UI = 2;
  static const TEXTUREFORMAT_R8I = 3;
  static const TEXTUREFORMAT_STENCIL8 = 4;
  static const TEXTUREFORMAT_R16F = 5;
  static const TEXTUREFORMAT_R16UI = 6;
  static const TEXTUREFORMAT_R16I = 7;
  static const TEXTUREFORMAT_RG8 = 8;
  static const TEXTUREFORMAT_RG8_SNORM = 9;
  static const TEXTUREFORMAT_RG8UI = 10;
  static const TEXTUREFORMAT_RG8I = 11;
  static const TEXTUREFORMAT_RGB565 = 12;
  static const TEXTUREFORMAT_RGB9_E5 = 13;
  static const TEXTUREFORMAT_RGB5_A1 = 14;
  static const TEXTUREFORMAT_RGBA4 = 15;
  static const TEXTUREFORMAT_DEPTH16 = 16;
  static const TEXTUREFORMAT_RGB8 = 17;
  static const TEXTUREFORMAT_SRGB8 = 18;
  static const TEXTUREFORMAT_RGB8_SNORM = 19;
  static const TEXTUREFORMAT_RGB8UI = 20;
  static const TEXTUREFORMAT_RGB8I = 21;
  static const TEXTUREFORMAT_DEPTH24 = 22;
  static const TEXTUREFORMAT_R32F = 23;
  static const TEXTUREFORMAT_R32UI = 24;
  static const TEXTUREFORMAT_R32I = 25;
  static const TEXTUREFORMAT_RG16F = 26;
  static const TEXTUREFORMAT_RG16UI = 27;
  static const TEXTUREFORMAT_RG16I = 28;
  static const TEXTUREFORMAT_R11F_G11F_B10F = 29;
  static const TEXTUREFORMAT_RGBA8 = 30;
  static const TEXTUREFORMAT_SRGB8_A8 = 31;
  static const TEXTUREFORMAT_RGBA8_SNORM = 32;
  static const TEXTUREFORMAT_UNUSED = 33;
  static const TEXTUREFORMAT_RGB10_A2 = 34;
  static const TEXTUREFORMAT_RGBA8UI = 35;
  static const TEXTUREFORMAT_RGBA8I = 36;
  static const TEXTUREFORMAT_DEPTH32F = 37;
  static const TEXTUREFORMAT_DEPTH24_STENCIL8 = 38;
  static const TEXTUREFORMAT_DEPTH32F_STENCIL8 = 39;
  static const TEXTUREFORMAT_RGB16F = 40;
  static const TEXTUREFORMAT_RGB16UI = 41;
  static const TEXTUREFORMAT_RGB16I = 42;
  static const TEXTUREFORMAT_RG32F = 43;
  static const TEXTUREFORMAT_RG32UI = 44;
  static const TEXTUREFORMAT_RG32I = 45;
  static const TEXTUREFORMAT_RGBA16F = 46;
  static const TEXTUREFORMAT_RGBA16UI = 47;
  static const TEXTUREFORMAT_RGBA16I = 48;
  static const TEXTUREFORMAT_RGB32F = 49;
  static const TEXTUREFORMAT_RGB32UI = 50;
  static const TEXTUREFORMAT_RGB32I = 51;
  static const TEXTUREFORMAT_RGBA32F = 52;
  static const TEXTUREFORMAT_RGBA32UI = 53;
  static const TEXTUREFORMAT_RGBA32I = 54;
  static const TEXTUREFORMAT_EAC_R11 = 55;
  static const TEXTUREFORMAT_EAC_R11_SIGNED = 56;
  static const TEXTUREFORMAT_EAC_RG11 = 57;
  static const TEXTUREFORMAT_EAC_RG11_SIGNED = 58;
  static const TEXTUREFORMAT_ETC2_RGB8 = 59;
  static const TEXTUREFORMAT_ETC2_SRGB8 = 60;
  static const TEXTUREFORMAT_ETC2_RGB8_A1 = 61;
  static const TEXTUREFORMAT_ETC2_SRGB8_A1 = 62;
  static const TEXTUREFORMAT_ETC2_EAC_RGBA8 = 63;
  static const TEXTUREFORMAT_ETC2_EAC_SRGBA8 = 64;
  static const TEXTUREFORMAT_DXT1_RGB = 65;
  static const TEXTUREFORMAT_DXT1_RGBA = 66;
  static const TEXTUREFORMAT_DXT3_RGBA = 67;
  static const TEXTUREFORMAT_DXT5_RGBA = 68;
  static const TEXTUREFORMAT_DXT1_SRGB = 69;
  static const TEXTUREFORMAT_DXT1_SRGBA = 70;
  static const TEXTUREFORMAT_DXT3_SRGBA = 71;
  static const TEXTUREFORMAT_DXT5_SRGBA = 72;
  static const TEXTUREFORMAT_RGBA_ASTC_4x4 = 73;
  static const TEXTUREFORMAT_RGBA_ASTC_5x4 = 74;
  static const TEXTUREFORMAT_RGBA_ASTC_5x5 = 75;
  static const TEXTUREFORMAT_RGBA_ASTC_6x5 = 76;
  static const TEXTUREFORMAT_RGBA_ASTC_6x6 = 77;
  static const TEXTUREFORMAT_RGBA_ASTC_8x5 = 78;
  static const TEXTUREFORMAT_RGBA_ASTC_8x6 = 79;
  static const TEXTUREFORMAT_RGBA_ASTC_8x8 = 80;
  static const TEXTUREFORMAT_RGBA_ASTC_10x5 = 81;
  static const TEXTUREFORMAT_RGBA_ASTC_10x6 = 82;
  static const TEXTUREFORMAT_RGBA_ASTC_10x8 = 83;
  static const TEXTUREFORMAT_RGBA_ASTC_10x10 = 84;
  static const TEXTUREFORMAT_RGBA_ASTC_12x10 = 85;
  static const TEXTUREFORMAT_RGBA_ASTC_12x12 = 86;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_4x4 = 87;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_5x4 = 88;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_5x5 = 89;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_6x5 = 90;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_6x6 = 91;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_8x5 = 92;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_8x6 = 93;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_8x8 = 94;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_10x5 = 95;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_10x6 = 96;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_10x8 = 97;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_10x10 = 98;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_12x10 = 99;
  static const TEXTUREFORMAT_SRGB8_ALPHA8_ASTC_12x12 = 100;
  static const TEXTUREFORMAT_RED_RGTC1 = 101;
  static const TEXTUREFORMAT_SIGNED_RED_RGTC1 = 102;
  static const TEXTUREFORMAT_RED_GREEN_RGTC2 = 103;
  static const TEXTUREFORMAT_SIGNED_RED_GREEN_RGTC2 = 104;
  static const TEXTUREFORMAT_RGB_BPTC_SIGNED_FLOAT = 105;
  static const TEXTUREFORMAT_RGB_BPTC_UNSIGNED_FLOAT = 106;
  static const TEXTUREFORMAT_RGBA_BPTC_UNORM = 107;
  static const TEXTUREFORMAT_SRGB_ALPHA_BPTC_UNORM = 108;
}

extension TLinearImageExt on Pointer<TLinearImage> {
  TLinearImage toDart() {
    return TLinearImage(this);
  }
}

final class TLinearImage extends self.Struct {
  TLinearImage(super._address);

  static Pointer<TLinearImage> stackAlloc() {
    return Pointer<TLinearImage>(_lib._stackAlloc<TLinearImage>(0));
  }
}

/// ! Pixel Data Format
sealed class TPixelDataFormat {
  /// !< One Red channel, float
  static const PIXELDATAFORMAT_R = 0;

  /// !< One Red channel, integer
  static const PIXELDATAFORMAT_R_INTEGER = 1;

  /// !< Two Red and Green channels, float
  static const PIXELDATAFORMAT_RG = 2;

  /// !< Two Red and Green channels, integer
  static const PIXELDATAFORMAT_RG_INTEGER = 3;

  /// !< Three Red, Green and Blue channels, float
  static const PIXELDATAFORMAT_RGB = 4;

  /// !< Three Red, Green and Blue channels, integer
  static const PIXELDATAFORMAT_RGB_INTEGER = 5;

  /// !< Four Red, Green, Blue and Alpha channels, float
  static const PIXELDATAFORMAT_RGBA = 6;

  /// !< Four Red, Green, Blue and Alpha channels, integer
  static const PIXELDATAFORMAT_RGBA_INTEGER = 7;
  static const PIXELDATAFORMAT_UNUSED = 8;

  /// !< Depth, 16-bit or 24-bits usually
  static const PIXELDATAFORMAT_DEPTH_COMPONENT = 9;

  /// !< Two Depth (24-bits) + Stencil (8-bits) channels
  static const PIXELDATAFORMAT_DEPTH_STENCIL = 10;
  static const PIXELDATAFORMAT_ALPHA = 11;
}

sealed class TPixelDataType {
  /// !< unsigned byte
  static const PIXELDATATYPE_UBYTE = 0;

  /// !< signed byte
  static const PIXELDATATYPE_BYTE = 1;

  /// !< unsigned short (16-bit)
  static const PIXELDATATYPE_USHORT = 2;

  /// !< signed short (16-bit)
  static const PIXELDATATYPE_SHORT = 3;

  /// !< unsigned int (32-bit)
  static const PIXELDATATYPE_UINT = 4;

  /// !< signed int (32-bit)
  static const PIXELDATATYPE_INT = 5;

  /// !< half-float (16-bit float)
  static const PIXELDATATYPE_HALF = 6;

  /// !< float (32-bits float)
  static const PIXELDATATYPE_FLOAT = 7;

  /// !< compressed pixels, @see CompressedPixelDataType
  static const PIXELDATATYPE_COMPRESSED = 8;

  /// !< three low precision floating-point numbers
  static const PIXELDATATYPE_UINT_10F_11F_11F_REV = 9;

  /// !< unsigned int (16-bit), encodes 3 RGB channels
  static const PIXELDATATYPE_USHORT_565 = 10;

  /// !< unsigned normalized 10 bits RGB, 2 bits alpha
  static const PIXELDATATYPE_UINT_2_10_10_10_REV = 11;
}

sealed class TTextureUsage {
  static const TEXTURE_USAGE_NONE = 0;

  /// !< Texture can be used as a color attachment
  static const TEXTURE_USAGE_COLOR_ATTACHMENT = 1;

  /// !< Texture can be used as a depth attachment
  static const TEXTURE_USAGE_DEPTH_ATTACHMENT = 2;

  /// !< Texture can be used as a stencil attachment
  static const TEXTURE_USAGE_STENCIL_ATTACHMENT = 4;

  /// !< Data can be uploaded into this texture (default)
  static const TEXTURE_USAGE_UPLOADABLE = 8;

  /// !< Texture can be sampled (default)
  static const TEXTURE_USAGE_SAMPLEABLE = 16;

  /// !< Texture can be used as a subpass input
  static const TEXTURE_USAGE_SUBPASS_INPUT = 32;

  /// !< Texture can be used the source of a blit()
  static const TEXTURE_USAGE_BLIT_SRC = 64;

  /// !< Texture can be used the destination of a blit()
  static const TEXTURE_USAGE_BLIT_DST = 128;

  /// !< Texture can be used the destination of a blit()
  static const TEXTURE_USAGE_PROTECTED = 256;

  /// !< Default texture usage
  static const TEXTURE_USAGE_DEFAULT = 24;
}

extension TKtx1BundleExt on Pointer<TKtx1Bundle> {
  TKtx1Bundle toDart() {
    return TKtx1Bundle(this);
  }
}

final class TKtx1Bundle extends self.Struct {
  TKtx1Bundle(super._address);

  static Pointer<TKtx1Bundle> stackAlloc() {
    return Pointer<TKtx1Bundle>(_lib._stackAlloc<TKtx1Bundle>(0));
  }
}

typedef VoidCallback = Pointer<self.NativeFunction<VoidCallbackFunction>>;
typedef DartVoidCallback
    = self.Pointer<self.NativeFunction<VoidCallbackFunction>>;
typedef VoidCallbackFunction = void Function(int requestId);
typedef DartVoidCallbackFunction = void Function(int requestId);

sealed class TSamplerMinFilter {
  static const FILTER_NEAREST = 0;
  static const FILTER_LINEAR = 1;
  static const FILTER_NEAREST_MIPMAP_NEAREST = 2;
  static const FILTER_LINEAR_MIPMAP_NEAREST = 3;
  static const FILTER_NEAREST_MIPMAP_LINEAR = 4;
  static const FILTER_LINEAR_MIPMAP_LINEAR = 5;
}

sealed class TSamplerMagFilter {
  static const MAG_FILTER_NEAREST = 0;
  static const MAG_FILTER_LINEAR = 1;
}

sealed class TSamplerWrapMode {
  static const WRAP_CLAMP_TO_EDGE = 0;
  static const WRAP_REPEAT = 1;
  static const WRAP_MIRRORED_REPEAT = 2;
}

sealed class TSamplerCompareMode {
  static const COMPARE_MODE_NONE = 0;
  static const COMPARE_MODE_COMPARE_TO_TEXTURE = 1;
}

sealed class TGizmoPickResultType {
  static const AxisX = 0;
  static const AxisY = 1;
  static const AxisZ = 2;
  static const Parent = 3;
  static const None = 4;
}

extension TGizmoExt on Pointer<TGizmo> {
  TGizmo toDart() {
    return TGizmo(this);
  }
}

final class TGizmo extends self.Struct {
  TGizmo(super._address);

  static Pointer<TGizmo> stackAlloc() {
    return Pointer<TGizmo>(_lib._stackAlloc<TGizmo>(0));
  }
}

extension TGltfResourceLoaderExt on Pointer<TGltfResourceLoader> {
  TGltfResourceLoader toDart() {
    return TGltfResourceLoader(this);
  }
}

final class TGltfResourceLoader extends self.Struct {
  TGltfResourceLoader(super._address);

  static Pointer<TGltfResourceLoader> stackAlloc() {
    return Pointer<TGltfResourceLoader>(
        _lib._stackAlloc<TGltfResourceLoader>(0));
  }
}

sealed class TGizmoType {
  static const GIZMO_TYPE_TRANSLATION = 0;
  static const GIZMO_TYPE_ROTATION = 1;
}

typedef GizmoPickCallback
    = Pointer<self.NativeFunction<GizmoPickCallbackFunction>>;
typedef DartGizmoPickCallback
    = self.Pointer<self.NativeFunction<GizmoPickCallbackFunction>>;
typedef GizmoPickCallbackFunction = void Function(
    int resultType, double x, double y, double z);
typedef DartGizmoPickCallbackFunction = void Function(
    int resultType, double x, double y, double z);

sealed class TGizmoAxis {
  static const X = 0;
  static const Y = 1;
  static const Z = 2;
}

extension TSkyboxExt on Pointer<TSkybox> {
  TSkybox toDart() {
    return TSkybox(this);
  }
}

final class TSkybox extends self.Struct {
  TSkybox(super._address);

  static Pointer<TSkybox> stackAlloc() {
    return Pointer<TSkybox>(_lib._stackAlloc<TSkybox>(0));
  }
}

extension double4x4Ext on Pointer<double4x4> {
  double4x4 toDart() {
    return double4x4(this);
  }
}

final class double4x4 extends self.Struct {
  Array<Float64> get col1 {
    final value = _lib.getValue(this._address + 0, '*');
    return Array<Float64>._(
        (numElements: 4, addr: Pointer<Float64>(this._address + 0)));
  }

  set col1(Array<Float64> val) {
    _lib.setValue(this._address + 0, val._.addr.addr.toJS, '*');
  }

  Array<Float64> get col2 {
    final value = _lib.getValue(this._address + 32, '*');
    return Array<Float64>._(
        (numElements: 4, addr: Pointer<Float64>(this._address + 32)));
  }

  set col2(Array<Float64> val) {
    _lib.setValue(this._address + 32, val._.addr.addr.toJS, '*');
  }

  Array<Float64> get col3 {
    final value = _lib.getValue(this._address + 64, '*');
    return Array<Float64>._(
        (numElements: 4, addr: Pointer<Float64>(this._address + 64)));
  }

  set col3(Array<Float64> val) {
    _lib.setValue(this._address + 64, val._.addr.addr.toJS, '*');
  }

  Array<Float64> get col4 {
    final value = _lib.getValue(this._address + 96, '*');
    return Array<Float64>._(
        (numElements: 4, addr: Pointer<Float64>(this._address + 96)));
  }

  set col4(Array<Float64> val) {
    _lib.setValue(this._address + 96, val._.addr.addr.toJS, '*');
  }

  double4x4(super._address);

  static Pointer<double4x4> stackAlloc() {
    return Pointer<double4x4>(_lib._stackAlloc<double4x4>(128));
  }
}

extension double3Ext on Pointer<double3> {
  double3 toDart() {
    return double3(this);
  }
}

final class double3 extends self.Struct {
  double get x {
    final value = _lib.getValue(this._address + 0, 'double').toDartDouble;
    return value;
  }

  set x(double val) {
    _lib.setValue(this._address + 0, val.toJS, 'double');
  }

  double get y {
    final value = _lib.getValue(this._address + 8, 'double').toDartDouble;
    return value;
  }

  set y(double val) {
    _lib.setValue(this._address + 8, val.toJS, 'double');
  }

  double get z {
    final value = _lib.getValue(this._address + 16, 'double').toDartDouble;
    return value;
  }

  set z(double val) {
    _lib.setValue(this._address + 16, val.toJS, 'double');
  }

  double3(super._address);

  static Pointer<double3> stackAlloc() {
    return Pointer<double3>(_lib._stackAlloc<double3>(24));
  }
}

sealed class TProjection {
  static const Perspective = 0;
  static const Orthographic = 1;
}

extension TTransformManagerExt on Pointer<TTransformManager> {
  TTransformManager toDart() {
    return TTransformManager(this);
  }
}

final class TTransformManager extends self.Struct {
  TTransformManager(super._address);

  static Pointer<TTransformManager> stackAlloc() {
    return Pointer<TTransformManager>(_lib._stackAlloc<TTransformManager>(0));
  }
}

extension Aabb3Ext on Pointer<Aabb3> {
  Aabb3 toDart() {
    return Aabb3(this);
  }
}

final class Aabb3 extends self.Struct {
  double get centerX {
    final value = _lib.getValue(this._address + 0, 'float').toDartDouble;
    return value;
  }

  set centerX(double val) {
    _lib.setValue(this._address + 0, val.toJS, 'float');
  }

  double get centerY {
    final value = _lib.getValue(this._address + 4, 'float').toDartDouble;
    return value;
  }

  set centerY(double val) {
    _lib.setValue(this._address + 4, val.toJS, 'float');
  }

  double get centerZ {
    final value = _lib.getValue(this._address + 8, 'float').toDartDouble;
    return value;
  }

  set centerZ(double val) {
    _lib.setValue(this._address + 8, val.toJS, 'float');
  }

  double get halfExtentX {
    final value = _lib.getValue(this._address + 12, 'float').toDartDouble;
    return value;
  }

  set halfExtentX(double val) {
    _lib.setValue(this._address + 12, val.toJS, 'float');
  }

  double get halfExtentY {
    final value = _lib.getValue(this._address + 16, 'float').toDartDouble;
    return value;
  }

  set halfExtentY(double val) {
    _lib.setValue(this._address + 16, val.toJS, 'float');
  }

  double get halfExtentZ {
    final value = _lib.getValue(this._address + 20, 'float').toDartDouble;
    return value;
  }

  set halfExtentZ(double val) {
    _lib.setValue(this._address + 20, val.toJS, 'float');
  }

  Aabb3(super._address);

  static Pointer<Aabb3> stackAlloc() {
    return Pointer<Aabb3>(_lib._stackAlloc<Aabb3>(24));
  }
}

extension TRendererExt on Pointer<TRenderer> {
  TRenderer toDart() {
    return TRenderer(this);
  }
}

final class TRenderer extends self.Struct {
  TRenderer(super._address);

  static Pointer<TRenderer> stackAlloc() {
    return Pointer<TRenderer>(_lib._stackAlloc<TRenderer>(0));
  }
}

extension TSwapChainExt on Pointer<TSwapChain> {
  TSwapChain toDart() {
    return TSwapChain(this);
  }
}

final class TSwapChain extends self.Struct {
  TSwapChain(super._address);

  static Pointer<TSwapChain> stackAlloc() {
    return Pointer<TSwapChain>(_lib._stackAlloc<TSwapChain>(0));
  }
}

extension TRenderTickerExt on Pointer<TRenderTicker> {
  TRenderTicker toDart() {
    return TRenderTicker(this);
  }
}

final class TRenderTicker extends self.Struct {
  TRenderTicker(super._address);

  static Pointer<TRenderTicker> stackAlloc() {
    return Pointer<TRenderTicker>(_lib._stackAlloc<TRenderTicker>(0));
  }
}

extension TAnimationManagerExt on Pointer<TAnimationManager> {
  TAnimationManager toDart() {
    return TAnimationManager(this);
  }
}

final class TAnimationManager extends self.Struct {
  TAnimationManager(super._address);

  static Pointer<TAnimationManager> stackAlloc() {
    return Pointer<TAnimationManager>(_lib._stackAlloc<TAnimationManager>(0));
  }
}

sealed class TBackend {
  /// !< Automatically selects an appropriate driver for the platform.
  static const BACKEND_DEFAULT = 0;

  /// !< Selects the OpenGL/ES driver (default on Android)
  static const BACKEND_OPENGL = 1;

  /// !< Selects the Vulkan driver if the platform supports it (default on Linux/Windows)
  static const BACKEND_VULKAN = 2;

  /// !< Selects the Metal driver if the platform supports it (default on MacOS/iOS).
  static const BACKEND_METAL = 3;

  /// !< Selects the no-op driver for testing purposes.
  static const BACKEND_NOOP = 4;
}

extension TEntityManagerExt on Pointer<TEntityManager> {
  TEntityManager toDart() {
    return TEntityManager(this);
  }
}

final class TEntityManager extends self.Struct {
  TEntityManager(super._address);

  static Pointer<TEntityManager> stackAlloc() {
    return Pointer<TEntityManager>(_lib._stackAlloc<TEntityManager>(0));
  }
}

extension TFenceExt on Pointer<TFence> {
  TFence toDart() {
    return TFence(this);
  }
}

final class TFence extends self.Struct {
  TFence(super._address);

  static Pointer<TFence> stackAlloc() {
    return Pointer<TFence>(_lib._stackAlloc<TFence>(0));
  }
}

extension TSceneAssetExt on Pointer<TSceneAsset> {
  TSceneAsset toDart() {
    return TSceneAsset(this);
  }
}

final class TSceneAsset extends self.Struct {
  TSceneAsset(super._address);

  static Pointer<TSceneAsset> stackAlloc() {
    return Pointer<TSceneAsset>(_lib._stackAlloc<TSceneAsset>(0));
  }
}

sealed class TPrimitiveType {
  /// !< points
  static const PRIMITIVETYPE_POINTS = 0;

  /// !< lines
  static const PRIMITIVETYPE_LINES = 1;

  /// !< line strip
  static const PRIMITIVETYPE_LINE_STRIP = 3;

  /// !< triangles
  static const PRIMITIVETYPE_TRIANGLES = 4;

  /// !< triangle strip
  static const PRIMITIVETYPE_TRIANGLE_STRIP = 5;
}

const int __bool_true_false_are_defined = 1;

extension NativeFunctionPointer0<T extends NativeType> on void Function() {
  // orignal type void Function() void Function() dart type void Function()

  Pointer<NativeFunction<void Function()>> addFunction() {
    return Pointer<NativeFunction<void Function()>>(
            _lib.addFunction<void Function()>(this.toJS, 'v'))
        .cast();
  }
}

extension NativeFunctionPointer1<T extends NativeType> on void Function(
    self.Pointer<TAnimationManager>) {
  // orignal type void Function(self.Pointer<TAnimationManager> ) void Function(Pointer<TAnimationManager> ) dart type void Function(self.Pointer<TAnimationManager> )

  Pointer<NativeFunction<void Function(self.Pointer<TAnimationManager>)>>
      addFunction() {
    return Pointer<
                NativeFunction<void Function(self.Pointer<TAnimationManager>)>>(
            _lib.addFunction<void Function(self.Pointer<TAnimationManager>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer2<T extends NativeType> on void Function(
    self.Pointer<TEngine>) {
  // orignal type void Function(self.Pointer<TEngine> ) void Function(Pointer<TEngine> ) dart type void Function(self.Pointer<TEngine> )

  Pointer<NativeFunction<void Function(self.Pointer<TEngine>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TEngine>)>>(_lib
            .addFunction<void Function(self.Pointer<TEngine>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer3<T extends NativeType> on void Function(
    self.Pointer<TRenderer>) {
  // orignal type void Function(self.Pointer<TRenderer> ) void Function(Pointer<TRenderer> ) dart type void Function(self.Pointer<TRenderer> )

  Pointer<NativeFunction<void Function(self.Pointer<TRenderer>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TRenderer>)>>(
            _lib.addFunction<void Function(self.Pointer<TRenderer>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer4<T extends NativeType> on void Function(
    self.Pointer<TSwapChain>) {
  // orignal type void Function(self.Pointer<TSwapChain> ) void Function(Pointer<TSwapChain> ) dart type void Function(self.Pointer<TSwapChain> )

  Pointer<NativeFunction<void Function(self.Pointer<TSwapChain>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TSwapChain>)>>(
            _lib.addFunction<void Function(self.Pointer<TSwapChain>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer6<T extends NativeType> on void Function(
    self.Pointer<TCamera>) {
  // orignal type void Function(self.Pointer<TCamera> ) void Function(Pointer<TCamera> ) dart type void Function(self.Pointer<TCamera> )

  Pointer<NativeFunction<void Function(self.Pointer<TCamera>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TCamera>)>>(_lib
            .addFunction<void Function(self.Pointer<TCamera>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer7<T extends NativeType> on void Function(
    self.Pointer<TView>) {
  // orignal type void Function(self.Pointer<TView> ) void Function(Pointer<TView> ) dart type void Function(self.Pointer<TView> )

  Pointer<NativeFunction<void Function(self.Pointer<TView>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TView>)>>(_lib
            .addFunction<void Function(self.Pointer<TView>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer8<T extends NativeType> on void Function(
    self.Pointer<TMaterial>) {
  // orignal type void Function(self.Pointer<TMaterial> ) void Function(Pointer<TMaterial> ) dart type void Function(self.Pointer<TMaterial> )

  Pointer<NativeFunction<void Function(self.Pointer<TMaterial>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TMaterial>)>>(
            _lib.addFunction<void Function(self.Pointer<TMaterial>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer9<T extends NativeType> on void Function(
    self.Pointer<TTexture>) {
  // orignal type void Function(self.Pointer<TTexture> ) void Function(Pointer<TTexture> ) dart type void Function(self.Pointer<TTexture> )

  Pointer<NativeFunction<void Function(self.Pointer<TTexture>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TTexture>)>>(
            _lib.addFunction<void Function(self.Pointer<TTexture>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer11<T extends NativeType> on void Function(
    self.Pointer<TFence>) {
  // orignal type void Function(self.Pointer<TFence> ) void Function(Pointer<TFence> ) dart type void Function(self.Pointer<TFence> )

  Pointer<NativeFunction<void Function(self.Pointer<TFence>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TFence>)>>(_lib
            .addFunction<void Function(self.Pointer<TFence>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer12<T extends NativeType> on void Function(
    self.Pointer<TSkybox>) {
  // orignal type void Function(self.Pointer<TSkybox> ) void Function(Pointer<TSkybox> ) dart type void Function(self.Pointer<TSkybox> )

  Pointer<NativeFunction<void Function(self.Pointer<TSkybox>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TSkybox>)>>(_lib
            .addFunction<void Function(self.Pointer<TSkybox>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer13<T extends NativeType> on void Function(
    self.Pointer<TIndirectLight>) {
  // orignal type void Function(self.Pointer<TIndirectLight> ) void Function(Pointer<TIndirectLight> ) dart type void Function(self.Pointer<TIndirectLight> )

  Pointer<NativeFunction<void Function(self.Pointer<TIndirectLight>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TIndirectLight>)>>(
            _lib.addFunction<void Function(self.Pointer<TIndirectLight>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer15<T extends NativeType> on void Function(bool) {
  // orignal type void Function(bool ) void Function(bool ) dart type void Function(bool )

  Pointer<NativeFunction<void Function(bool)>> addFunction() {
    return Pointer<NativeFunction<void Function(bool)>>(
            _lib.addFunction<void Function(bool)>(this.toJS, 'vi'))
        .cast();
  }
}

extension NativeFunctionPointer16<T extends NativeType> on void Function(
    self.Pointer<TMaterialInstance>) {
  // orignal type void Function(self.Pointer<TMaterialInstance> ) void Function(Pointer<TMaterialInstance> ) dart type void Function(self.Pointer<TMaterialInstance> )

  Pointer<NativeFunction<void Function(self.Pointer<TMaterialInstance>)>>
      addFunction() {
    return Pointer<
                NativeFunction<void Function(self.Pointer<TMaterialInstance>)>>(
            _lib.addFunction<void Function(self.Pointer<TMaterialInstance>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer19<T extends NativeType> on void Function(
    self.Pointer<TColorGrading>) {
  // orignal type void Function(self.Pointer<TColorGrading> ) void Function(Pointer<TColorGrading> ) dart type void Function(self.Pointer<TColorGrading> )

  Pointer<NativeFunction<void Function(self.Pointer<TColorGrading>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TColorGrading>)>>(
            _lib.addFunction<void Function(self.Pointer<TColorGrading>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer20<T extends NativeType> on void Function(
    self.Pointer<TSceneAsset>) {
  // orignal type void Function(self.Pointer<TSceneAsset> ) void Function(Pointer<TSceneAsset> ) dart type void Function(self.Pointer<TSceneAsset> )

  Pointer<NativeFunction<void Function(self.Pointer<TSceneAsset>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TSceneAsset>)>>(
            _lib.addFunction<void Function(self.Pointer<TSceneAsset>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer26<T extends NativeType> on void Function(
    self.Pointer<TLinearImage>) {
  // orignal type void Function(self.Pointer<TLinearImage> ) void Function(Pointer<TLinearImage> ) dart type void Function(self.Pointer<TLinearImage> )

  Pointer<NativeFunction<void Function(self.Pointer<TLinearImage>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TLinearImage>)>>(
            _lib.addFunction<void Function(self.Pointer<TLinearImage>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer28<T extends NativeType> on void Function(
    self.Pointer<Float32>) {
  // orignal type void Function(self.Pointer<Float32> ) void Function(Pointer<Float32> ) dart type void Function(self.Pointer<Float32> )

  Pointer<NativeFunction<void Function(self.Pointer<Float32>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<Float32>)>>(_lib
            .addFunction<void Function(self.Pointer<Float32>)>(this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer29<T extends NativeType> on void Function(int) {
  // orignal type void Function(int ) void Function(int ) dart type void Function(int )

  Pointer<NativeFunction<void Function(int)>> addFunction() {
    return Pointer<NativeFunction<void Function(int)>>(
            _lib.addFunction<void Function(int)>(this.toJS, 'vi'))
        .cast();
  }
}

extension NativeFunctionPointer35<T extends NativeType> on void Function(
    self.Pointer<TRenderTarget>) {
  // orignal type void Function(self.Pointer<TRenderTarget> ) void Function(Pointer<TRenderTarget> ) dart type void Function(self.Pointer<TRenderTarget> )

  Pointer<NativeFunction<void Function(self.Pointer<TRenderTarget>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TRenderTarget>)>>(
            _lib.addFunction<void Function(self.Pointer<TRenderTarget>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer36<T extends NativeType> on void Function(
    self.Pointer<TTextureSampler>) {
  // orignal type void Function(self.Pointer<TTextureSampler> ) void Function(Pointer<TTextureSampler> ) dart type void Function(self.Pointer<TTextureSampler> )

  Pointer<NativeFunction<void Function(self.Pointer<TTextureSampler>)>>
      addFunction() {
    return Pointer<
                NativeFunction<void Function(self.Pointer<TTextureSampler>)>>(
            _lib.addFunction<void Function(self.Pointer<TTextureSampler>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer40<T extends NativeType> on void Function(
    self.Pointer<TGltfAssetLoader>) {
  // orignal type void Function(self.Pointer<TGltfAssetLoader> ) void Function(Pointer<TGltfAssetLoader> ) dart type void Function(self.Pointer<TGltfAssetLoader> )

  Pointer<NativeFunction<void Function(self.Pointer<TGltfAssetLoader>)>>
      addFunction() {
    return Pointer<
                NativeFunction<void Function(self.Pointer<TGltfAssetLoader>)>>(
            _lib.addFunction<void Function(self.Pointer<TGltfAssetLoader>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer41<T extends NativeType> on void Function(
    self.Pointer<TGltfResourceLoader>) {
  // orignal type void Function(self.Pointer<TGltfResourceLoader> ) void Function(Pointer<TGltfResourceLoader> ) dart type void Function(self.Pointer<TGltfResourceLoader> )

  Pointer<NativeFunction<void Function(self.Pointer<TGltfResourceLoader>)>>
      addFunction() {
    return Pointer<
                NativeFunction<
                    void Function(self.Pointer<TGltfResourceLoader>)>>(
            _lib.addFunction<void Function(self.Pointer<TGltfResourceLoader>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer44<T extends NativeType> on void Function(
    double) {
  // orignal type void Function(double ) void Function(double ) dart type void Function(double )

  Pointer<NativeFunction<void Function(double)>> addFunction() {
    return Pointer<NativeFunction<void Function(double)>>(
            _lib.addFunction<void Function(double)>(this.toJS, 'vf'))
        .cast();
  }
}

extension NativeFunctionPointer45<T extends NativeType> on void Function(
    self.Pointer<TFilamentAsset>) {
  // orignal type void Function(self.Pointer<TFilamentAsset> ) void Function(Pointer<TFilamentAsset> ) dart type void Function(self.Pointer<TFilamentAsset> )

  Pointer<NativeFunction<void Function(self.Pointer<TFilamentAsset>)>>
      addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TFilamentAsset>)>>(
            _lib.addFunction<void Function(self.Pointer<TFilamentAsset>)>(
                this.toJS, 'vp'))
        .cast();
  }
}

extension NativeFunctionPointer46<T extends NativeType> on void Function(
    self.Pointer<TGizmo>) {
  // orignal type void Function(self.Pointer<TGizmo> ) void Function(Pointer<TGizmo> ) dart type void Function(self.Pointer<TGizmo> )

  Pointer<NativeFunction<void Function(self.Pointer<TGizmo>)>> addFunction() {
    return Pointer<NativeFunction<void Function(self.Pointer<TGizmo>)>>(_lib
            .addFunction<void Function(self.Pointer<TGizmo>)>(this.toJS, 'vp'))
        .cast();
  }
}
